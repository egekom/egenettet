<?php

/**
 * @file
 * intranet profile.
 *
 * Install, update hooks for  intranet project.
 */
define("LDAP_SERVER_DEFAULT_NAME", 'default_ldap_server');

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function egedal_profile_install() {
    // Get t() function.
    $t = get_t();

    // Add text formats.
    $filtered_html_format = array(
        'format' => 'filtered_html',
        'name' => 'Filtered HTML',
        'weight' => 0,
        'filters' => array(
            // URL filter.
            'filter_url' => array(
                'weight' => 0,
                'status' => 1,
            ),
            // HTML filter.
            'filter_html' => array(
                'weight' => 1,
                'status' => 1,
                'settings' => array(
                    'allowed_html' => '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <iframe>',
                ),
            ),
            // Line break filter.
            'filter_autop' => array(
                'weight' => 2,
                'status' => 1,
            ),
            // HTML corrector filter.
            'filter_htmlcorrector' => array(
                'weight' => 10,
                'status' => 1,
            ),
        ),
    );
    $filtered_html_format = (object) $filtered_html_format;
    filter_format_save($filtered_html_format);

    $full_html_format = array(
        'format' => 'full_html',
        'name' => 'Full HTML',
        'weight' => 1,
        'filters' => array(
            // URL filter.
            'filter_url' => array(
                'weight' => 0,
                'status' => 1,
            ),
            // Line break filter.
            'filter_autop' => array(
                'weight' => 1,
                'status' => 1,
            ),
            // HTML corrector filter.
            'filter_htmlcorrector' => array(
                'weight' => 10,
                'status' => 1,
            ),
        ),
    );
    $full_html_format = (object) $full_html_format;
    filter_format_save($full_html_format);

    // Enable some standard blocks.
    $default_theme = 'egedal';
    $admin_theme = 'seven';
    variable_set('theme_default', $default_theme);
    variable_set('admin_theme', $admin_theme);
    variable_set('node_admin_theme', '1');
    // Enable Roskilde and Seven themes.
    theme_enable(array('egedal', 'seven'));
    // System module installs Bartik. Remove it.
    theme_disable(array('bartik'));

    $blocks = array(
        array(
            'module' => 'system',
            'delta' => 'main',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'content',
            'pages' => '',
            'cache' => -1,
        ),
        array(
            'module' => 'search',
            'delta' => 'form',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => -1,
            'region' => 'sidebar_first',
            'pages' => '',
            'cache' => -1,
        ),
        array(
            'module' => 'node',
            'delta' => 'recent',
            'theme' => $admin_theme,
            'status' => 1,
            'weight' => 10,
            'region' => 'dashboard_main',
            'pages' => '',
            'cache' => -1,
        ),
        array(
            'module' => 'user',
            'delta' => 'login',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'sidebar_first',
            'pages' => '',
            'cache' => -1,
        ),
        array(
            'module' => 'system',
            'delta' => 'navigation',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'sidebar_first',
            'pages' => '',
            'cache' => -1,
        ),
        array(
            'module' => 'system',
            'delta' => 'powered-by',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 10,
            'region' => 'footer',
            'pages' => '',
            'cache' => -1,
        ),
        array(
            'module' => 'system',
            'delta' => 'help',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'help',
            'pages' => '',
            'cache' => -1,
        ),
        array(
            'module' => 'system',
            'delta' => 'main',
            'theme' => $admin_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'content',
            'pages' => '',
            'cache' => -1,
        ),
        array(
            'module' => 'system',
            'delta' => 'help',
            'theme' => $admin_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'help',
            'pages' => '',
            'cache' => -1,
        ),
        array(
            'module' => 'user',
            'delta' => 'login',
            'theme' => $admin_theme,
            'status' => 1,
            'weight' => 10,
            'region' => 'content',
            'pages' => '',
            'cache' => -1,
        ),
        array(
            'module' => 'user',
            'delta' => 'new',
            'theme' => $admin_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'dashboard_sidebar',
            'pages' => '',
            'cache' => -1,
        ),
        array(
            'module' => 'search',
            'delta' => 'form',
            'theme' => $admin_theme,
            'status' => 1,
            'weight' => -10,
            'region' => 'dashboard_sidebar',
            'pages' => '',
            'cache' => -1,
        ),
    );
    $query = db_insert('block')->fields(array(
        'module', 'delta', 'theme', 'status',
        'weight', 'region', 'pages', 'cache',
    ));
    foreach ($blocks as $block) {
        $query->values($block);
    }
    $query->execute();

    // ------
    // Uncomment if phonebook should be created programmatically
    // _roskilde_intra_create_phonebook();
    // Add phonebook fields
    // Uncomment if phonebook should be created programmatically
    // roskilde_intra_update_7105();
    // ------
    // Enable user picture support
    // and set the default to a square thumbnail option.
    variable_set('user_pictures', '1');
    variable_set('user_picture_dimensions', '1024x1024');
    variable_set('user_picture_file_size', '800');
    variable_set('user_picture_style', 'thumbnail');

    // Allow visitor account creation with administrative approval.
    variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

    // Enable default permissions for system roles.
    $filtered_html_permission = filter_permission_name($filtered_html_format);
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
        'access content',
        'access comments',
        $filtered_html_permission,
    ));
    user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(
        'access content',
        'access comments',
        'post comments',
        'skip comment approval',
        $filtered_html_permission,
    ));

    // Create a default role for site administrators,
    // with all available permissions assigned.
    $admin_role = new stdClass();
    $admin_role->name = 'administrator';
    $admin_role->weight = 2;
    user_role_save($admin_role);
    user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
    // Set this as the administrator role.
    variable_set('user_admin_role', $admin_role->rid);

    // Assign user 1 the "administrator" role.
    db_insert('users_roles')
        ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
        ->execute();

    // Create a Home link in the main menu.
    $item = array(
        'link_title' => $t('Home'),
        'link_path' => '<front>',
        'menu_name' => 'main-menu',
    );
    menu_link_save($item);

    // Update the menu router information.
    menu_rebuild();

    //  Settup LDAP server.
    // _roskilde_intra_ldap_server_setup();

    // Settup Apache Solr server.
    _egedal_profile_apachesolr_server_setup();
    // Setup date formats.
    //roskilde_intra_update_7101();
    //roskilde_intra_update_7102();
    //roskilde_intra_update_7104();
}

/**
 * Helper function creating phonebook content type.
 */
function _roskilde_intra_create_phonebook() {
    // Get t() function.
    $t = get_t();

    // Insert default pre-defined node types into the database. For a complete
    // list of available node type attributes, refer to the node type API
    // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
    $types = array(
        array(
            'type' => 'phonebook',
            'name' => $t('Phonebook'),
            'base' => 'node_content',
            'description' => $t("Use <em>phonebook</em> for your static content, such as an 'Phonebook' page."),
            'custom' => 1,
            'modified' => 1,
            'locked' => 0,
        ),
    );

    foreach ($types as $type) {
        $type = node_type_set_defaults($type);
        node_type_save($type);
    }

    // Insert default pre-defined RDF mapping into the database.
    $rdf_mappings = array(
        array(
            'type' => 'node',
            'bundle' => 'phonebook',
            'mapping' => array(
                'rdftype' => array('foaf:Document'),
            ),
        ),
    );
    foreach ($rdf_mappings as $rdf_mapping) {
        rdf_mapping_save($rdf_mapping);
    }

    db_insert('simple_database')
        ->fields(array('bundle' => 'phonebook'))
        ->execute();

    // Default "Phonebook" to not be promoted and have comments disabled.
    variable_set('node_options_phonebook', array('status'));
    variable_set('comment_phonebook', COMMENT_NODE_HIDDEN);

    // Don't display date and author information for "Phonebook" nodes by default.
    variable_set('node_submitted_phonebook', FALSE);
}

/**
 * Helper function: Setup LDAP server.
 */
function _roskilde_intra_ldap_server_setup() {
    global $conf;

    if (isset($conf['ldap_initial_settings']['servers_conf'])) {
        $servers_conf = $conf['ldap_initial_settings']['servers_conf'];
        if (isset($servers_conf['address'])) {
            $ldap_servers_default_conf = array(
                'sid' => LDAP_SERVER_DEFAULT_NAME,
                'name' => LDAP_SERVER_DEFAULT_NAME,
                'status' => TRUE,
                'ldap_type' => 'ad',
                'port' => 389,
                'tls' => FALSE,
                'followrefs' => FALSE,
                'bind_method' => 1,
                'binddn' => '',
                'bindpw' => '',
                'basedn' => '',
                'user_attr' => 'samaccountname',
                'account_name_attr' => '',
                'mail_attr' => 'mail',
                'mail_template' => '',
                'picture_attr' => '',
                'unique_persistent_attr' => '',
                'unique_persistent_attr_binary' => FALSE,
                'user_dn_expression' => '',
                'ldap_to_drupal_user' => '',
                'testing_drupal_username' => '',
                'testing_drupal_user_dn' => '',
                'grp_unused' => FALSE,
                'grp_object_cat' => '',
                'grp_nested' => FALSE,
                'grp_user_memb_attr_exists' => TRUE,
                'grp_user_memb_attr' => 'memberof',
                'grp_memb_attr' => '',
                'grp_memb_attr_match_user_attr' => '',
                'grp_derive_from_dn' => FALSE,
                'grp_derive_from_dn_attr' => '',
                'grp_test_grp_dn' => '',
                'grp_test_grp_dn_writeable' => '',
                'search_pagination' => FALSE,
                'search_page_size' => 1000,
                'weight' => 0,
            );

            // Create LDAP server.
            $record = $servers_conf + $ldap_servers_default_conf;
            drupal_write_record('ldap_servers', $record);

            $ldap_authentication_conf_default = array(
                'sids' => array(LDAP_SERVER_DEFAULT_NAME => LDAP_SERVER_DEFAULT_NAME),
                'authenticationMode' => 2,
                'loginUIUsernameTxt' => NULL,
                'loginUIPasswordTxt' => NULL,
                'ldapUserHelpLinkUrl' => NULL,
                'ldapUserHelpLinkText' => 'Logon Help',
                'emailOption' => 3,
                'emailUpdate' => 1,
                'passwordOption' => 2,
                'allowOnlyIfTextInDn' => array(),
                'excludeIfTextInDn' => array(),
                'allowTestPhp' => '',
                'excludeIfNoAuthorizations' => NULL,
                'ssoRemoteUserStripDomainName' => NULL,
                'ssoExcludedPaths' => array(),
                'ssoExcludedHosts' => array(),
                'seamlessLogin' => NULL,
                'ssoNotifyAuthentication' => NULL,
                'ldapImplementation' => NULL,
                'cookieExpire' => NULL,
                'emailTemplate' => '@username@fake-domain.com',
                'emailTemplateHandling' => 1,
                'templateUsagePromptUser' => 0,
                'templateUsageNeverUpdate' => 0,
                'templateUsageResolveConflict' => 0,
                'templateUsagePromptRegex' => '.*@fake-domain\\.com',
                'templateUsageRedirectOnLogin' => 0,
            );

            $ldap_user_conf_default = array(
                'drupalAcctProvisionServer' => LDAP_SERVER_DEFAULT_NAME,
                'ldapEntryProvisionServer' => 0,
                'drupalAcctProvisionTriggers' => array(
                    2 => '2',
                    1 => 0,
                ),
                'ldapEntryProvisionTriggers' => array(
                    6 => 0,
                    7 => 0,
                    8 => 0,
                    3 => 0,
                ),
                'orphanedDrupalAcctBehavior' => 'user_cancel_block',
                'orphanedCheckQty' => '100',
                'userConflictResolve' => 2,
                'manualAccountConflict' => '2',
                'acctCreation' => 4,
                'ldapUserSynchMappings' => array(),
                'disableAdminPasswordField' => 0,
            );

            if (isset($servers_conf['sid'])) {
                $ldap_authentication_conf_default['sids'] = array(
                    $servers_conf['sid'] => $servers_conf['sid'],
                );
                $ldap_user_conf_default['drupalAcctProvisionServer'] = $servers_conf['sid'];
            }

            // Settup authentication settings.
            if (isset($conf['ldap_initial_settings']['authentication_conf'])) {
                $authentication_conf = $conf['ldap_initial_settings']['authentication_conf'];
            }
            else {
                $authentication_conf = array();
            }
            $authentication_conf += $ldap_authentication_conf_default;
            variable_set('ldap_authentication_conf', $authentication_conf);

            // Settup user settings.
            if (isset($conf['ldap_initial_settings']['user_conf'])) {
                $user_conf = $conf['ldap_initial_settings']['user_conf'];
            }
            else {
                $user_conf = array();
            }
            $user_conf += $ldap_user_conf_default;
            variable_set('ldap_user_conf', $user_conf);
        }
    }
}

/**
 * Helper function: Setup Apachesolr server.
 */
function _egedal_profile_apachesolr_server_setup() {
    global $conf;

    if (isset($conf['apachesolr_settings'])) {
        // Get default apachesolr settings.
        $env_id = apachesolr_default_environment();
        $default_environment = apachesolr_environment_load($env_id);

        // Add apachesolr settings.
        $environment = array_replace_recursive($default_environment, $conf['apachesolr_settings']);

        // Apachesolr settings.
        $environment = apachesolr_environment_load($env_id);
        $environment['index_bundles']['file'] = array(
            'audio',
            'document',
            'image',
            'video',
        );
        $environment['index_bundles']['node'] = array(
            'editorial_news',
            'event',
            'personal_note',
            'short_news',
            'subpage',
            'topic_page',
        );
        apachesolr_environment_save($environment);
    }
}

/**
 * Add Phonebook and set correct theme.
 */
function roskilde_intra_update_7100(&$sandbox) {
    // Get t() function.
    $t = get_t();

    variable_set('theme_default', 'roskilde');
    variable_set('admin_theme', 'seven');
    variable_set('node_admin_theme', '1');
    // Enable Roskilde and Seven themes.
    theme_enable(array('roskilde', 'seven'));
    // System module installs Bartik. Remove it.
    theme_disable(array('bartik'));

    if (node_type_get_name('phonebook') === FALSE) {
        $types = array(
            array(
                'type' => 'phonebook',
                'name' => $t('Phonebook'),
                'base' => 'node_content',
                'description' => $t("Use <em>phonebook</em> for your static content, such as an 'Phonebook' page."),
                'custom' => 1,
                'modified' => 1,
                'locked' => 0,
            ),
        );

        foreach ($types as $type) {
            $type = node_type_set_defaults($type);
            node_type_save($type);
            node_add_body_field($type);
        }

        // Insert default pre-defined RDF mapping into the database.
        $rdf_mappings = array(
            array(
                'type' => 'node',
                'bundle' => 'phonebook',
                'mapping' => array(
                    'rdftype' => array('foaf:Document'),
                ),
            ),
        );
        foreach ($rdf_mappings as $rdf_mapping) {
            rdf_mapping_save($rdf_mapping);
        }

        db_insert('simple_database')
            ->fields(array('bundle' => 'phonebook'))
            ->execute();

        // Default "Phonebook" to not be promoted and have comments disabled.
        variable_set('node_options_phonebook', array('status'));
        variable_set('comment_phonebook', COMMENT_NODE_HIDDEN);

        // Don't display date and author information
        // for "Phonebook" nodes by default.
        variable_set('node_submitted_phonebook', FALSE);
    }
}

/**
 * Implements hook_update().
 *
 * Set date formats only day and only month used in List events view.
 */
function roskilde_intra_update_7101() {
    // Set the only day date format.
    db_insert('date_format_type')
        ->fields(array(
            // Machine Name.
            'type' => 'roskilde_only_day',
            // Display Name.
            'title' => 'Roskilde Only day',
            // 1 = can't change through UI, 0 = can change.
            'locked' => 0,
        ))
        ->execute();

    db_insert('date_formats')
        ->fields(array(
            'format' => 'd',
            'type' => 'custom',
            'locked' => 0,
        ))
        ->execute();

    variable_set('date_format_roskilde_only_day', 'd');

    // Set the only month date format.
    db_insert('date_format_type')
        ->fields(array(
            // Machine Name.
            'type' => 'roskilde_only_month',
            // Display Name.
            'title' => 'Roskilde Only month',
            // 1 = can't change through UI, 0 = can change.
            'locked' => 0,
        ))
        ->execute();

    db_insert('date_formats')
        ->fields(array(
            'format' => 'M',
            'type' => 'custom',
            'locked' => 0,
        ))
        ->execute();

    variable_set('date_format_roskilde_only_month', 'M');
}

/**
 * Implements hook_update().
 *
 * Set date formats only day time in List events view.
 */
function roskilde_intra_update_7102() {
    // Set the only day date format.
    db_insert('date_format_type')
        ->fields(array(
            // Machine Name.
            'type' => 'roskilde_only_time',
            // Display Name.
            'title' => 'Roskilde Only Time',
            // 1 = can't change through UI, 0 = can change.
            'locked' => 0,
        ))
        ->execute();

    db_insert('date_formats')
        ->fields(array(
            'format' => 'G:i',
            'type' => 'custom',
            'locked' => 0,
        ))
        ->execute();

    variable_set('date_format_roskilde_only_time', 'G:i');
}

/**
 * Implements hook_update().
 *
 * Set index apache solr index bundles.
 */
function roskilde_intra_update_7103() {
    _roskilde_intra_apachesolr_server_setup();
}

/**
 * Implements hook_update().
 *
 * Set up roskilde main date format (e.g. 22. Januar 2015)
 */
function roskilde_intra_update_7104() {
    // Set the only day date format.
    db_insert('date_format_type')
        ->fields(array(
            // Machine Name.
            'type' => 'roskilde_date',
            // Display Name.
            'title' => 'Roskilde Date',
            // 1 = can't change through UI, 0 = can change.
            'locked' => 0,
        ))
        ->execute();

    db_insert('date_formats')
        ->fields(array(
            'format' => 'j. F Y',
            'type' => 'custom',
            'locked' => 0,
        ))
        ->execute();

    variable_set('date_format_roskilde_date', 'j. F Y');
}

/**
 * Implements hook_update().
 *
 * Add fields to phonebook.
 */
function roskilde_intra_update_7105() {
    // Adding Field User.
    $field_name = 'field_user';
    // Make sure the field doesn't already exist.
    if (!field_info_instance('node', $field_name, 'phonebook')) {
        // Create the field.
        $field = array(
            'field_name' => $field_name,
            'type' => 'entityreference',
            'module' => 'entityreference',
            'settings' => array(
                'target_type' => 'user',
                'handler' => 'base',
            ),
        );
        field_create_field($field);
        // Create the instance.
        $instance = array(
            'field_name' => $field_name,
            'entity_type' => 'node',
            'bundle' => 'phonebook',
            'label' => 'User',
            'description' => 'The user related to this phonebook.',
            'required' => FALSE,
        );
        field_create_instance($instance);
        watchdog('phonebook', "{$field_name} was added successfully.");
    }
    else {
        watchdog('phonebook', "{$field_name} already exists.");
    }

    // Adding Field Profile Image.
    $field_name = 'field_image';
    if (!field_info_instance('node', $field_name, 'phonebook')) {
        // Create the instance.
        $instance = array(
            'field_name' => $field_name,
            'entity_type' => 'node',
            'bundle' => 'phonebook',
            'label' => 'Profile Image',
            'description' => 'Profile image of the user.',
            'required' => FALSE,
        );
        field_create_instance($instance);
        watchdog('phonebook', "{$field_name} was added successfully.");
    }
    else {
        watchdog('phonebook', "{$field_name} already exists.");
    }
}

/**
 * Implements hook_update().
 *
 * Clear field cache due to issues with added computed field.
 */
function roskilde_intra_update_7106() {
    field_info_cache_clear();
}

/**
 * Implements hook_update().
 *
 * Enable module computed_field and clear field cache.
 */
function roskilde_intra_update_7107() {
    module_enable(array('computed_field'), TRUE);
    field_info_cache_clear();
}

/**
 * Add 'Filtered HTML + IFrame' text format.
 */
function roskilde_intra_update_7108() {
    _roskilde_iframe_text_format();
}

/**
 * Helper function: Add 'Filtered HTML + IFrame' text format.
 */
function _roskilde_iframe_text_format() {
    $filtered_html_format = array(
        'format' => 'filtered_html_iframe',
        'name' => 'Filtered HTML + IFrame',
        'weight' => 0,
        'filters' => array(
            // URL filter.
            'filter_url' => array(
                'weight' => 0,
                'status' => 1,
            ),
            // HTML filter.
            'filter_html' => array(
                'weight' => 1,
                'status' => 1,
                'settings' => array(
                    'allowed_html' => '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <iframe>',
                ),
            ),
            // Line break filter.
            'filter_autop' => array(
                'weight' => 2,
                'status' => 1,
            ),
            // HTML corrector filter.
            'filter_htmlcorrector' => array(
                'weight' => 10,
                'status' => 1,
            ),
        ),
    );
    $filtered_html_format = (object) $filtered_html_format;
    filter_format_save($filtered_html_format);
}

/**
 * Add iframe tag to 'Filtered HTML' text format.
 */
function roskilde_intra_update_7109() {
    $filtered_html_format = array(
        'format' => 'filtered_html',
        'name' => 'Filtered HTML',
        'weight' => 0,
        'filters' => array(
            // URL filter.
            'filter_url' => array(
                'weight' => 0,
                'status' => 1,
            ),
            // HTML filter.
            'filter_html' => array(
                'weight' => 1,
                'status' => 1,
                'settings' => array(
                    'allowed_html' => '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <iframe>',
                ),
            ),
            // Line break filter.
            'filter_autop' => array(
                'weight' => 2,
                'status' => 1,
            ),
            // HTML corrector filter.
            'filter_htmlcorrector' => array(
                'weight' => 10,
                'status' => 1,
            ),
        ),
    );
    $filtered_html_format = (object) $filtered_html_format;
    filter_format_save($filtered_html_format);
}

/**
 * Remove 'Filtered HTML + IFrame' text format.
 */
function roskilde_intra_update_7110() {
    db_delete('filter')
        ->condition('format', 'filtered_html_iframe')
        ->execute();
    db_delete('filter_format')
        ->condition('format', 'filtered_html_iframe')
        ->execute();
}

/**
 * Remove field 'Color' from baner link.
 */
function roskilde_intra_update_7111() {
    $instance = field_info_instance('node', 'field_color', 'banner_link');
    if ($instance) {
        field_delete_instance($instance);
        drupal_set_message(t('Field "Color" was successfully deleted.'), 'status');
    }
}

/**
 * Remove field 'Color' from fieldable_panels_pane baner link.
 */
function roskilde_intra_update_7112() {
    $instance = field_info_instance('fieldable_panels_pane', 'field_color', 'banner_link');
    if ($instance) {
        field_delete_instance($instance);
        drupal_set_message(t('Field "Color" was successfully deleted.'), 'status');
    }
}

/**
 * Truncate table {field_data_field_mobile_number}.
 */
function roskilde_intra_update_7113() {
    db_truncate('field_data_field_mobile_number')->execute();
}

/**
 * Add table tags to 'Filtered HTML' text format.
 */
function roskilde_intra_update_7114() {
    $filtered_html_format = array(
        'format' => 'filtered_html',
        'name' => 'Filtered HTML',
        'weight' => 0,
        'filters' => array(
            // URL filter.
            'filter_url' => array(
                'weight' => 0,
                'status' => 1,
            ),
            // HTML filter.
            'filter_html' => array(
                'weight' => 1,
                'status' => 1,
                'settings' => array(
                    'allowed_html' => '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <iframe> <table> <tr> <td> <th> <thead> <caption> <tbody>',
                ),
            ),
            // Line break filter.
            'filter_autop' => array(
                'weight' => 2,
                'status' => 1,
            ),
            // HTML corrector filter.
            'filter_htmlcorrector' => array(
                'weight' => 10,
                'status' => 1,
            ),
        ),
    );
    $filtered_html_format = (object) $filtered_html_format;
    filter_format_save($filtered_html_format);
}

/**
 * Implements hook_update_N().
 *
 * Remove ophanned term references and mark their entities for reindex in SOLR.
 */
function roskilde_intra_update_7115() {
    // Cleanup field tables and collect list of affected entities.
    $deleted_references = 0;
    $entities_to_update = array();
    foreach (field_info_fields() as $field_name => $field_info) {
        $table = 'field_data_' . $field_name;
        $term_id_field = $field_name . '_tid';

        if ($field_info['type'] == 'taxonomy_term_reference') {
            $result = db_query("SELECT entity_id, $term_id_field, entity_type from $table WHERE $term_id_field not IN (SELECT tid FROM taxonomy_term_data)");
            $orphanned = $result->fetchAll();
            if (!empty($orphanned)) {
                foreach ($orphanned as $item) {
                    $result = db_query("DELETE FROM $table WHERE entity_id={$item->entity_id} AND $term_id_field = {$item->{$term_id_field}}");
                    if ($result->rowCount()) {
                        $deleted_references++;
                    }
                    $entities_to_update[$item->entity_type][] = $item->entity_id;
                }
            }
        }
    }

    // Mark affected entities in Apache SOLR for reindexing.
    $entities_number = 0;
    foreach ($entities_to_update as $entity_type => $entity_ids) {
        $ids = array_unique($entity_ids);
        foreach ($ids as $entity_id) {
            $entities_number++;
            apachesolr_mark_entity($entity_type, $entity_id);
        }
    }

    // Due to changes in raw data storage, we need to clear the field chache, to
    // make the changes take effect.
    field_cache_clear();

    // Write out report.
    $t = get_t();
    return $t("Deleted @deleted term references from @entities_count", array(
        '@deleted' => $deleted_references,
        '@entities_count' => $entities_number,
    ));
}

/**
 * Implements hook_update_N().
 *
 * Replace full html with filterd html for tabbed content.
 */
function roskilde_intra_update_7116() {
    db_update('field_data_field_text')
        ->fields(array('field_text_format' => 'filtered_html'))
        ->condition('field_text_format', 'full_html')
        ->condition('bundle', 'field_tab_content')
        ->execute();
}

/**
 * Implements hook_update_N().
 *
 * Merge primary and secondary channel.
 */
function roskilde_intra_update_7117() {
    // Get primary cannels.
    $select = db_select('field_data_field_primary_channel', 'fdfpc');
    $select->fields('fdfpc', array());

    foreach ($select->execute() as $data) {
        $new_data = (array) $data;
        unset($new_data['field_primary_channel_tid']);
        unset($new_data['delta']);

        // Get max delta by entity id and revision id.
        $query = db_select('field_data_field_secondary_channel');
        $query->condition('entity_id', $data->entity_id);
        $query->condition('revision_id', $data->revision_id);
        $query->addExpression('MAX(delta)');

        $max_delta = $query->execute()->fetchField();

        // Merge the primary channel into secondary channel.
        db_merge('field_data_field_secondary_channel')
            ->key($new_data + array(
                    'field_secondary_channel_tid' => $data->field_primary_channel_tid,
                ))
            ->insertFields($new_data + array(
                    'delta' => isset($max_delta) ? $max_delta + 1 : 0,
                    'field_secondary_channel_tid' => $data->field_primary_channel_tid,
                ))
            ->execute();
    }
}

/**
 * Implements hook_update_N().
 *
 * Change primary channal with has tag into view panes configurations.
 */
function roskilde_intra_update_7118() {
    $subtypes = array();
    $subtypes[] = 'editorial_news_list-panel_pane_1';
    $subtypes[] = 'editorial_news_list-panel_pane_2';
    $subtypes[] = 'short_news_list-panel_pane_1';
    $subtypes[] = 'latest_events-panel_pane_1';
    $subtypes[] = 'latest_events-panel_pane_2';
    $subtypes[] = 'latest_news-panel_pane_1';

    $table = 'panels_pane';
    $select = db_select($table);
    $select->fields($table, array());
    $select->condition('type', 'views_panes');
    $select->condition('subtype', $subtypes, 'IN');

    foreach ($select->execute() as $pane) {
        // Get pane configurations.
        $configuration = unserialize($pane->configuration);
        if (isset($configuration['exposed']) && array_key_exists('field_primary_channel_tid', $configuration['exposed'])) {
            $tid = $configuration['exposed']['field_primary_channel_tid'];
            unset($configuration['exposed']['field_primary_channel_tid']);

            switch (TRUE) {
                case is_array($tid);
                    $configuration['exposed']['tid'] = $tid;
                    break;
                case is_int($tid);
                    $configuration['exposed']['tid'] = array((int) $tid => $tid);
                    break;
                default:
                    $configuration['exposed']['tid'] = array();
                    if (is_string($tid) && !empty($tid) && 'All' != $tid) {
                        $term = taxonomy_get_term_by_name($tid, 'channel');
                        if (!empty($term) && $tid = key($term)) {
                            $configuration['exposed']['tid'][$tid] = (string) $tid;
                        }
                    }
            }

            db_update($table)
                ->fields(array(
                    'configuration' => serialize($configuration),
                ))
                ->condition('pid', $pane->pid)
                ->execute();
        }
    }
}

/**
 * Implements hook_update_N().
 *
 * TODO: Need explanation by developer of the purpose of this updte hook.
 *
 * Setup field permission settings.
 */
function roskilde_intra_update_7119() {
    $safe_execute = function($callback) {
        try {
            $callback();
        }
        catch (Exception $e) {
            watchdog_exception('roskilde_intra', $e, NULL, array(), WATCHDOG_WARNING);
        }
    };
    $fields_list = array(
        'field_additional_information', 'field_address_city',
        'field_address_number', 'field_address_road', 'field_address_zip_code',
        'field_area', 'field_committee', 'field_ean_number', 'field_email',
        'field_fax', 'field_first_name', 'field_from_active_directory',
        'field_image_to_website', 'field_last_name', 'field_link',
        'field_mailing_address', 'field_main_number', 'field_med_organization',
        'field_mobile_number', 'field_organizational_unit', 'field_phone_number',
        'field_phonebook_contact_id', 'field_phonebook_image',
        'field_phonebook_search_words', 'field_phonebook_start_date',
        'field_phonebook_type', 'field_political_party', 'field_position',
        'field_text_to_internal_use', 'field_text_to_website', 'field_to_website',
        'field_unit', 'field_user', 'field_work_assignments',
    );
    $used_fields = array_intersect_key(field_info_fields(), array_combine($fields_list, $fields_list));
    foreach ($used_fields as $field_name => $field) {
        $field['field_permissions']['type'] = 2;
        $safe_execute(function() use ($field) {
            field_update_field($field);
        });
    }
    $safe_execute(function() {
        features_revert();
    });
}

/**
 * Implements hook_update_N().
 *
 * Remove the 'Web editor' role.
 */
function roskilde_intra_update_7120() {
    db_delete('role')
        ->condition('name', 'Web editor')
        ->execute();
}

/**
 * Implements hook_update_N().
 *
 * Change taxonomy has tag with secondary cannel into view panes configurations.
 */
function roskilde_intra_update_7121() {
    $subtypes = array();
    $subtypes[] = 'editorial_news_list-panel_pane_1';
    $subtypes[] = 'editorial_news_list-panel_pane_2';
    $subtypes[] = 'short_news_list-panel_pane_1';
    $subtypes[] = 'latest_events-panel_pane_1';
    $subtypes[] = 'latest_events-panel_pane_2';
    $subtypes[] = 'latest_news-panel_pane_1';

    $table = 'panels_pane';
    $select = db_select($table);
    $select->fields($table, array());
    $select->condition('type', 'views_panes');
    $select->condition('subtype', $subtypes, 'IN');

    foreach ($select->execute() as $pane) {
        // Get pane configurations.
        $configuration = unserialize($pane->configuration);
        if (isset($configuration['exposed']) && array_key_exists('tid', $configuration['exposed'])) {
            $tid = $configuration['exposed']['tid'];
            unset($configuration['exposed']['tid']);
            $configuration['exposed']['field_secondary_channel_tid'] = $tid;

            db_update($table)
                ->fields(array(
                    'configuration' => serialize($configuration),
                ))
                ->condition('pid', $pane->pid)
                ->execute();
        }
    }
}

/**
 * Implements hook_update_N().
 *
 * Swap title and field_title values on subpage content type.
 */
function roskilde_intra_update_7122() {
    $select = db_select('node', 'n');
    $select->leftJoin('field_data_field_title', 'fdft', 'n.nid = fdft.entity_id');
    $select->addField('n', 'nid');
    $select->addField('n', 'title', 'node_title');
    $select->addField('fdft', 'field_title_value', 'field_title');
    $select->condition('n.type', 'subpage');

    $subpages = $select->execute()->fetchAllAssoc('nid');

    $updated_ids = array();
    // Case statement for node title.
    $node_title_case = '';
    // Case statement for node field_title.
    $field_title_case = '';
    foreach ($subpages as $nid => $data) {
        if (!empty($data->field_title)) {
            if ($data->field_title == $data->node_title) {
                unset($subpages[$nid]);
                continue;
            }
            // Add new case statment for node title.
            $node_title_case .= "WHEN $nid THEN '{$data->field_title}' ";
            // Add new case statment for node field_title.
            $field_title_case .= "WHEN $nid THEN '{$data->node_title}' ";
            $updated_ids[] = $nid;
        }
    }

    $transaction = db_transaction();
    try {
        // Update node titles.
        $title_query = db_update('node');
        $title_query->expression('title', "CASE nid $node_title_case END");
        $title_query->condition('nid', $updated_ids, 'IN');
        $title_query->execute();

        // Update node titles (revision).
        $title_query = db_update('node_revision');
        $title_query->expression('title', "CASE nid $node_title_case END");
        $title_query->condition('nid', $updated_ids, 'IN');
        $title_query->execute();

        // Update node field_titles.
        $field_title_query = db_update('field_data_field_title');
        $field_title_query->expression('field_title_value', "CASE entity_id $field_title_case END");
        $field_title_query->condition('entity_id', $updated_ids, 'IN');
        $field_title_query->execute();

        // Update node field_titles (revision).
        $field_title_query = db_update('field_revision_field_title');
        $field_title_query->expression('field_title_value', "CASE entity_id $field_title_case END");
        $field_title_query->condition('entity_id', $updated_ids, 'IN');
        $field_title_query->execute();
    }
    catch (Exception $e) {
        $transaction->rollback();
        // Re-throw the exception so we are aware of the failure.
        throw $e;
    }

    $unchanged = array_diff_key($subpages, array_flip($updated_ids));

    foreach ($unchanged as $nid => $data) {
        $node = node_load($nid);
        $node_wrapper = entity_metadata_wrapper('node', $node);
        $node_wrapper->field_title->set($data->node_title);
        $node_wrapper->save();
    }
}

/**
 * Implements hook_update_N().
 *
 * Update banner elements' color.
 */
function roskilde_intra_update_7123() {
    $color_mapping = array(
        '#9F0A13' => '#96030c',
        '#6E7D5A' => '#495d46',
        '#4B4899' => '#4c429c',
    );

    $baner_elements = db_select('field_data_field_color', 'fc')
        ->fields('fc', array('entity_id', 'field_color_rgb'))
        ->condition('fc.bundle', 'banner_element')
        ->condition('fc.field_color_rgb', array('#98DFF8', '#5D6A6A'), 'NOT IN')
        ->execute()
        ->fetchAllAssoc('entity_id');

    $color_case = '';
    foreach ($baner_elements as $nid => $data) {
        // Skip elements with the right color.
        if (FALSE !== array_search($data->field_color_rgb, $color_mapping)) {
            continue;
        }
        if (array_key_exists($data->field_color_rgb, $color_mapping)) {
            $color_case .= "WHEN $nid THEN '{$color_mapping[$data->field_color_rgb]}' ";
        }
        else {
            $color_case .= "WHEN $nid THEN '#5D6A6A' ";
        }
        $updated_ids[] = $nid;
    }

    $transaction = db_transaction();
    try {
        $field_title_query = db_update('field_data_field_color');
        $field_title_query->expression('field_color_rgb', "CASE entity_id $color_case END");
        $field_title_query->condition('entity_id', $updated_ids, 'IN');
        $field_title_query->execute();
    }
    catch (Exception $e) {
        $transaction->rollback();
        // Re-throw the exception so we are aware of the failure.
        throw $e;
    }
}

/**
 * Implements hook_update_N().
 *
 * Update cardinality for fields 'field_committee' and 'field_political_party'.
 */
function roskilde_intra_update_7124() {
    $fields = db_select('field_config', 'fc')
        ->fields('fc', array('id', 'field_name', 'cardinality'))
        ->condition(
            db_or()
                ->condition('fc.field_name', 'field_committee')
                ->condition('fc.field_name', 'field_political_party')
        )
        ->execute()
        ->fetchAllAssoc('id');

    $transaction = db_transaction();
    try {
        foreach ($fields as $id => $data) {
            switch ($data->field_name) {
                case 'field_committee':
                    if ("-1" != $data->cardinality) {
                        db_update('field_config')
                            ->fields(array('cardinality' => '-1'))
                            ->condition('id', $id)
                            ->execute();
                    }
                    break;

                case 'field_political_party':
                    if ("1" != $data->cardinality) {
                        db_update('field_config')
                            ->fields(array('cardinality' => '1'))
                            ->condition('id', $id)
                            ->execute();
                    }
                    break;
            }
        }
    }
    catch (Exception $e) {
        $transaction->rollback();
        // Re-throw the exception so we are aware of the failure.
        throw $e;
    }
}

/**
 * Add <u> tag to 'Filtered HTML' text format.
 */
function roskilde_intra_update_7125() {
    $filtered_html_format = array(
        'format' => 'filtered_html',
        'name' => 'Filtered HTML',
        'weight' => 0,
        'filters' => array(
            // URL filter.
            'filter_url' => array(
                'weight' => 0,
                'status' => 1,
            ),
            // HTML filter.
            'filter_html' => array(
                'weight' => 1,
                'status' => 1,
                'settings' => array(
                    'allowed_html' => '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <iframe> <table> <tr> <td> <th> <thead> <caption> <tbody> <u>',
                ),
            ),
            // Line break filter.
            'filter_autop' => array(
                'weight' => 2,
                'status' => 1,
            ),
            // HTML corrector filter.
            'filter_htmlcorrector' => array(
                'weight' => 10,
                'status' => 1,
            ),
        ),
    );
    $filtered_html_format = (object) $filtered_html_format;
    filter_format_save($filtered_html_format);
}

/**
 * Implements hook_update_N().
 *
 * Change the blocks names on user dashboard.
 */
function roskilde_intra_update_7126() {
    $settings = unserialize(array_shift(db_select('homebox_users', 'hu')
        ->fields('hu', array('settings'))
        ->condition('hu.name', 'user_dashboard')
        ->execute()
        ->fetchCol()));

    $mapping = array(
        'roskilde_customisations_roskilde_my_subscriptions' => 'Mine abonementer',
        'roskilde_customisations_roskilde_favorite_colleagues' => 'Mine kolleger',
        'roskilde_customisations_roskilde_my_contents' => 'Mit indhold',
    );

    foreach ($settings as $name => &$setting) {
        if (array_key_exists($name, $mapping)) {
            $setting['title'] = $mapping[$name];
        }
    }

    db_update('homebox_users')
        ->fields(array('settings' => serialize($settings)))
        ->execute();
}

/**
 * Implements hook_update_N().
 *
 * Remove the roles: Address editor, Administration editor, Callcenter,
 * Chief secretary, HR, Internal service, Owner, Webmaster.
 */
function egedal_profile_update_7100() {
  $roles = array('Address editor', 'Administration editor', 'Callcenter', 'Chief secretary', 'HR', 'Internal service', 'Owner', 'Webmaster');
  foreach ($roles as $role) {
    user_role_delete($role);
  }
}

/**
 * Remove field 'Link' from 'Banner link' fildable panel pane.
 */
function egedal_profile_update_7101() {
    $instance = field_info_instance('fieldable_panels_pane', 'field_link', 'banner_link_element');
    if ($instance) {
        field_delete_instance($instance);
        drupal_set_message(t('Field "Link" was successfully deleted.'), 'status');
    }
}

/**
 * Helper function: Delete fields by field-contents mapped array.
 */
function _egedal_profile_delete_fields(array $fields) {
  foreach ($fields as $field_name => $entity_types) {
    foreach ($entity_types as $entity_type => $bundles) {
      foreach ($bundles as $bundle_name) {
        $instance = field_info_instance($entity_type, $field_name, $bundle_name);
        if ($instance) {
          field_delete_instance($instance);
          $msg = t('Field !field from !type:!bundle was successfully deleted.', array(
            '!field' => $field_name,
            '!type' => $entity_type,
            '!bundle' => $bundle_name,
          ));
          drupal_set_message($msg, 'status');
        }
      }
    }
  }
}

/**
 * Helper function: Delete vocabularies by vocabulary names array.
 */
function _egedal_profile_delete_taxonomies(array $taxonomies) {
  $vocabularies = taxonomy_vocabulary_get_names();
  foreach ($taxonomies as $taxonomy_name) {
    if (array_key_exists($taxonomy_name, $vocabularies)) {
      taxonomy_vocabulary_delete($vocabularies[$taxonomy_name]->vid);
      $msg = t('Taxonomy !taxonomy_name was successfully deleted.', array(
        '!taxonomy_name' => $taxonomy_name,
      ));
      drupal_set_message($msg, 'status');
    }
  }
}

/**
 * Remove field 'Editorial responsibility'.
 */
function egedal_profile_update_7102() {
  _egedal_profile_delete_fields(array(
    'field_editorial_responsibility' => array(
      'node' => array('article', 'editorial_news', 'event', 'unit', 'front_page', 'topic_frontpage', 'topic_page', 'subpage', 'webform'),
    ),
  ));
}

/**
 * Remove fields 'Placement' and 'Channel'.
 */
function egedal_profile_update_7103() {
  _egedal_profile_delete_fields(array(
    'field_primary_channel' => array(
      'node' => array('short_news', 'editorial_news', 'event'),
    ),
    'field_secondary_channel' => array(
      'node' => array('short_news', 'editorial_news', 'event'),
    ),
    'field_my_department' => array(
      'taxonomy_term' => array('channel'),
    ),
  ));

  _egedal_profile_delete_taxonomies(array('channel'));
}

/**
 * Remove fields.
 */
function egedal_profile_update_7104() {
  _egedal_profile_delete_fields(array(
    'field_subheader' => array(
      'node' => array('topic_frontpage', 'banner_element'),
    ),
    'field_piwik_statistics' => array(
      'node' => array('topic_frontpage', 'event', 'editorial_news', 'subpage', 'topic_page'),
    ),
    'field_search_keywords' => array(
      'node' => array('article', 'topic_page'),
    ),
    'field_alfresco_document' => array(
      'node' => array('topic_frontpage'),
    ),
    'field_datetime' => array(
      'node' => array('short_news'),
    ),
    'field_teaser' => array(
      'node' => array('short_news'),
    ),
  ));
}

/**
 * Remove fields.
 */
function egedal_profile_update_7105() {
  _egedal_profile_delete_fields(array(
    'field_subheader' => array(
      'node' => array('topic_frontpage', 'banner_element'),
    ),
    'field_banner_link' => array(
      'node' => array('article', 'webform', 'editorial_news', 'event'),
    ),
    'field_file_image_title_text' => array(
      'node' => array('webform'),
    ),
    'field_date' => array(
      'node' => array('editorial_news'),
    ),
    'field_byline' => array(
      'node' => array('editorial_news'),
    ),
    'field_phonebook_search_words' => array(
      'node' => array('editorial_news'),
    ),
    'field_image' => array(
      'node' => array('editorial_news'),
    ),
    'field_placement' => array(
      'node' => array('event'),
    ),
  ));
}

/**
 * Remove content types.
 */
function egedal_profile_update_7106() {
  $content_types = array(
    'banner_link' => array('features_content_type_banner_link'),
    'subpage' => array('features_content_type_subpage'),
    'personal_note' => array('features_content_type_personal_note'),
    'topic_page' => array('features_content_type_topic_page')
  );
  foreach ($content_types as $type => $module_list) {
    module_disable($module_list);
    node_type_delete($type);
  }
}

/**
 * Remove fields.
 */
function egedal_profile_update_7107() {
  _egedal_profile_delete_fields(array(
    'field_tab_content' => array(
      'fieldable_panels_pane' => array('tabbed_content'),
    ),
  ));
}

/**
 * Remove fields.
 */
function egedal_profile_update_7108() {
  _egedal_profile_delete_fields(array(
    'field_tags' => array(
      'node' => array('short_news'),
    ),
    'field_color' => array(
      'node' => array('warning'),
    ),
    'field_image' => array(
      'node' => array('warning'),
    ),
  ));
}

/**
 * Added settings for login destination.
 */
function egedal_profile_update_7109() {
  if (module_enable(array('login_destination'))) {
    $result = db_select('login_destination')
      ->fields('login_destination', array())
      ->condition('destination', '<front>')
      ->execute()
      ->fetchAll();

    if (empty($result)) {
      $record = new stdClass();
      $record->triggers = 'a:1:{s:5:"login";s:5:"login";}';
      $record->roles = 'a:0:{}';
      $record->pages = NULL;
      $record->destination = '<front>';

      drupal_write_record('login_destination', $record);
    }
  }
}

/**
 * Remove "Editorial" field group.
 */
function egedal_profile_update_7110() {
  foreach (array('article', 'webform', 'editorial_news', 'event') as $bundle) {
    if ($group = field_group_load_field_group('group_editorial', 'node', $bundle, 'form')) {
      ctools_include('export');
      field_group_group_export_delete($group, FALSE);
    }
  }
}

/**
 * Remove the field 'Upload image' from short news content type.
 */
function egedal_profile_update_7111() {
  _egedal_profile_delete_fields(array(
    'field_image_data' => array(
      'node' => array('short_news'),
    ),
  ));
}

/**
 * Remove the fieldable pane 'Roskilde custom pane'.
 */
function egedal_profile_update_7112() {
  _egedal_profile_delete_fields(array(
    'field_body' => array(
      'fieldable_panels_pane' => array('roskilde_custom_pane'),
    ),
  ));

  ctools_include('export');
  $object = ctools_export_crud_load('fieldable_panels_pane_type', 'roskilde_custom_pane');
  ctools_export_crud_delete('fieldable_panels_pane_type', $object);
}

/**
 * Remove the fieldable pane 'Roskilde custom pane'.
 */
function egedal_profile_update_7113() {
  _egedal_profile_delete_fields(array(
    'field_tags' => array(
      'node' => array('topic_frontpage'),
    ),
  ));
}

/**
 * Implements hook_update().
 *
 * Set up egedal main date format (e.g. 02.12)
 */
function egedal_profile_update_7114() {
    // Set the only day date format.
    try{
        db_insert('date_format_type')
            ->fields(array(
                // Machine Name.
                'type' => 'egedal_date_format',
                // Display Name.
                'title' => 'Egedal Date Format',
                // 1 = can't change through UI, 0 = can change.
                'locked' => 0,
            ))
            ->execute();
    }
    catch (Exception $e) {}

    try{
        db_insert('date_formats')
            ->fields(array(
                'format' => 'd.m',
                'type' => 'custom',
                'locked' => 0,
            ))
            ->execute();
    }
     catch (Exception $e) {}

    variable_set('date_format_egedal_date_format', 'd.m');
}

/**
 * Implements hook_update_N().
 *
 * Update user roles.
 */
function egedal_profile_update_7115() {
  $updates = array(
    'administrator' => 'Administrator',
    'Editor' => 'Content supplier',
  );

  foreach ($updates as $old_name => $new_name) {
    $role = db_select('role')
      ->fields('role')
      ->condition('name', $old_name)
      ->execute()
      ->fetchObject();

    if (!empty($role)) {
      $role->name = $new_name;
      drupal_write_record('role', $role, 'rid');
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Add 'User' role to the all users.
 */
function egedal_profile_update_7116() {
  $feature = features_get_features('features_roles_and_permissions');
  $components = array_keys($feature->info['features']);
  features_revert(array('features_roles_and_permissions' => $components));

  $role = db_select('role')
      ->fields('role')
      ->condition('name', 'User')
      ->execute()
      ->fetchObject();

  if (!empty($role)) {
    $uids = db_select('users')
      ->fields('users', array('uid'))
      ->condition('uid', 0, '>')
      ->execute()
      ->fetchCol();

    user_multiple_role_edit($uids, 'add_role', $role->rid);
  }
}

/**
 * Implements hook_update_N().
 *
 * Remove 'Article' link from 'Search pages' menu.
 */
function egedal_profile_update_7117() {
  $result = db_query("SELECT * FROM {menu_links} WHERE link_path = :link_path", array(':link_path' => 'search/article'));
  foreach ($result as $link) {
    _menu_delete_item($link, TRUE);
  }
}

/**
 * Helper functin: Delete all content from given content type name.
 */
function _egedal_profile_delete_all_phonebooks($type) {
  $query = new EntityFieldQuery;

  $result = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', $type)
    ->execute();

  if (isset($result['node']) && count($result['node'])) {
    $node_ids = array_keys($result['node']);
    node_delete_multiple($node_ids);
  }
}

/**
 * Remove fields from phonebook content type.
 */
function egedal_profile_update_7118() {
  // Remove all phonebooks.
  _egedal_profile_delete_all_phonebooks('phonebook');

  _egedal_profile_delete_fields(array(
    'field_additional_information' => array(
      'node' => array('phonebook'),
    ),
    'field_address_city' => array(
      'node' => array('phonebook'),
    ),
    'field_address_number' => array(
      'node' => array('phonebook'),
    ),
    'field_address_zip_code' => array(
      'node' => array('phonebook'),
    ),
    'field_area' => array(
      'node' => array('phonebook'),
    ),
    'field_calendar_link' => array(
      'node' => array('phonebook'),
    ),
    'field_committee' => array(
      'node' => array('phonebook'),
    ),
    'field_ean_number' => array(
      'node' => array('phonebook'),
    ),
    'field_fax' => array(
      'node' => array('phonebook'),
    ),
    'field_from_active_directory' => array(
      'node' => array('phonebook'),
    ),
    'field_from_ad_text' => array(
      'node' => array('phonebook'),
    ),
    'field_image_to_website' => array(
      'node' => array('phonebook'),
    ),
    'field_mailing_address' => array(
      'node' => array('phonebook'),
    ),
    'field_main_number' => array(
      'node' => array('phonebook'),
    ),
    'field_med_organization' => array(
      'node' => array('phonebook'),
    ),
    'field_owner' => array(
      'node' => array('phonebook'),
    ),
    'field_phonebook_search_words' => array(
      'node' => array('phonebook'),
    ),
    'field_phonebook_start_date' => array(
      'node' => array('phonebook'),
    ),
    'field_phonebook_type' => array(
      'node' => array('phonebook'),
    ),
    'field_political_party' => array(
      'node' => array('phonebook'),
    ),
    'field_text_to_internal_use' => array(
      'node' => array('phonebook'),
    ),
    'field_text_to_website' => array(
      'node' => array('phonebook'),
    ),
    'field_to_website' => array(
      'node' => array('phonebook'),
    ),
    'field_mobile_number' => array(
      'node' => array('phonebook'),
    ),
    'field_phone_number' => array(
      'node' => array('phonebook'),
    ),
    'field_phonebook_contact_id' => array(
      'node' => array('phonebook'),
    ),
    'field_unit_page' => array(
      'taxonomy_term' => array('phonebook_unit'),
    ),
    'field_user_department' => array(
      'user' => array('user'),
    ),
  ));

  // Remove 'Phonebook - Unit' vocabulary.
  $v_names = taxonomy_vocabulary_get_names();
  foreach (array('phonebook_area', 'phonebook_departments', 'phonebook_med_organization', 'phonebook_political_committee', 'phonebook_political_party', 'phonebook_type', 'phonebook_unit', 'roskilde_roads') as $v_name) {
    if (isset($v_names[$v_name])) {
      taxonomy_vocabulary_delete($v_names[$v_name]->vid);
    }
  }

  // Remove unnecessary field groups into phonebook content type.
  foreach (array('group_call_center', 'group_politicians', 'group_to_website', 'group_other_info') as $g_name) {
    if ($group = field_group_load_field_group($g_name, 'node', 'phonebook', 'form')) {
      field_group_group_export_delete($group, FALSE);
    }
  }
}

/**
 * Remove fields from phonebook content type.
 */
function egedal_profile_update_7119() {
  _egedal_profile_delete_fields(array(
    'field_full_name' => array(
      'node' => array('phonebook'),
    ),
    'field_link' => array(
      'node' => array('phonebook'),
    ),
    'field_interests' => array(
      'node' => array('phonebook'),
    ),
    'field_address_work' => array(
      'node' => array('phonebook'),
    ),
    'field_working_hours' => array(
      'node' => array('phonebook'),
    ),
    'field_username' => array(
      'node' => array('phonebook'),
    ),
    'field_roskilder_address_road' => array(
      'node' => array('phonebook'),
    ),
  ));
}

/**
 * Remove field_unit from short_news content type.
 */
function egedal_profile_update_7120() {
  _egedal_profile_delete_fields(array(
    'field_unit' => array(
      'node' => array('short_news'),
    ),
  ));
}

/**
 * Update the site name.
 */
function egedal_profile_update_7121() {
  $site_name = 'Egedal';
  db_update('variable_store')
    ->fields(array('value' => $site_name))
    ->condition('name', 'site_name')
    ->execute();
  variable_set('site_name', $site_name);
  variable_set('maintenance_mode_message', 'Egedal is currently under maintenance. We should be back shortly. Thank you for your patience.');
}

/**
 * Add new custom block 'My units setting' under user_dashboard page.
 */
function egedal_profile_update_7122() {
  $table = 'homebox_pages';
  try {
    $settings = db_select($table, 'hp')
      ->fields('hp', array('settings'))
      ->condition('hp.name', 'user_dashboard')
      ->execute()
      ->fetchCol();

    if ($settings) {
      $module = 'roskilde_customisations';
      $delta = 'roskilde_my_units';
      $settings = unserialize($settings[0]);
      $settings['blocks'][$module . '_' . $delta] = array(
        'module' => $module,
        'delta' => $delta,
        'title' => '',
        'open' => 1,
        'color' => 'default',
        'status' => 1,
        'region' => 2,
        'movable' => 1,
        'closable' => 1,
        'weight' => -34,
      );

      db_update($table)
        ->fields(array(
          'settings' => serialize($settings),
        ))
        ->condition('name', 'user_dashboard')
        ->execute();
    }
  }
  catch (Exception $e) {
    throw $e;
  }
}

/**
 * Remove feature 'Homebox pages'.
 */
function egedal_profile_update_7123() {
  try {
    db_delete('system')
      ->condition('name', 'features_homebox_pages', 'LIKE')
      ->execute();
  }
  catch (Exception $e) {
    throw $e;
  }
}

/**
 * Remove unneeded module comment_notify
 */
function egedal_profile_update_7124() {
  $module = 'comment_notify';
  if(module_exists($module)){
    module_disable(array($module));
    drupal_uninstall_modules(array($module));
  }
}

/**
 * Update configuration for subscriptions module
 */
function egedal_profile_update_7126() {
  $table = 'subscriptions_user';
  if (module_exists('subscriptions') && db_table_exists($table)) {
    db_update($table)
      ->fields(array(
        'digest' => 0,
        'secure_links' => 0,
        'send_interval' => 1,
        'send_updates' => 0,
        'send_comments' => 1,
        'send_interval_visible' => 0,
        'send_updates_visible' => 0,
        'send_comments_visible' => 0,
        'autosub_on_post' => 1,
        'autosub_on_update' => 1,
        'autosub_on_comment' => 1,
        'send_self' => 0,
      ))
      ->execute();
  }
}