<?php

/**
 * @file
 * Additional features to CMIS module.
 */

if (!defined('CMIS_EXTRA_ALFRESCO_SLINGSHOT_URL')) {
  define('CMIS_EXTRA_ALFRESCO_SLINGSHOT_URL', 'alfresco/wcservice/slingshot');
}

require 'cmis_extra.inc';

/**
 * Implements hook_permission().
 */
function cmis_extra_permission() {
  return array(
    'cmis extra view ajax browse' => array(
      'title' => t('View CMIS ajax browse'),
    ),
    'cmis extra view browse' => array(
      'title' => t('View CMIS Extra browse'),
    ),
    'cmis extra view views' => array(
      'title' => t('View CMIS Extra views'),
    ),
    'cmis extra view field' => array(
      'title' => t('View CMIS Extra field'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function cmis_extra_menu_alter(&$items) {
  $items['cmis/browser']['access callback'] = 'cmis_extra_user_access';
  $items['cmis/browser']['access arguments'][] = 'type_cmis_browser';

  $items['cmis/views/%']['access callback'] = 'cmis_extra_user_access';
  $items['cmis/views/%']['access arguments'][] = 'type_cmis_views';

  $items['admin/settings/cmis/field/ajax']['access callback'] = 'cmis_extra_user_access';
  $items['admin/settings/cmis/field/ajax']['access arguments'][] = 'type_cmis_field';

  $items['admin/settings/cmis/field/ajax/%/%']['access callback'] = 'cmis_extra_user_access';
  $items['admin/settings/cmis/field/ajax/%/%']['access arguments'][] = 'type_cmis_field';

  $items['admin/config/cmis/views/ajax']['access arguments'] = array('cmis extra view ajax browse');
  $items['admin/config/cmis/views/ajax/%']['access arguments'] = array('cmis extra view ajax browse');
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function cmis_extra_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_block_info().
 */
function cmis_extra_block_info() {
  $blocks = array();

  $blocks['cmis_custom_docs'] = array(
    'info' => t('CMIS Custom Documents'),
  );

  return $blocks;
}

/**
 * Implements hook_init().
 */
function cmis_extra_init() {

  drupal_add_css('.ui-front {z-index: 10000 !important;}', $option['type'] = 'inline');

}

/**
 * Implements hook_block_view().
 */
function cmis_extra_block_view($delta = '') {
  $block = array();

  if ($delta == 'cmis_custom_docs') {
    $block['subject'] = 'Documents';
    $block['content'] = '';
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function cmis_extra_block_configure($delta = '') {
  $form = array();
  if ($delta == 'cmis_custom_docs') {
    drupal_add_js(drupal_get_path('module', 'cmis_views') . '/cmis_browser.js');
    $form['cmis_block_add']['filepath'] = array(
      '#type' => 'textfield',
      '#title' => t('File Path location'),
      '#description' => t('Enter the file path location of the folder or file type that you want to display <br /><em>For example: Sites/docs/documentLibrary/casestudies</em>'),
      '#default_value' => variable_get('cmis_custom_dir_block_path'),
      '#size' => 250,
      '#maxlength' => 250,
      '#dependency' => array('radio:querytype' => array('0')),
    );
    $form['cmis_block_add']['browse'] = array(
      '#type' => 'button',
      '#value' => t('Browse CMIS repository'),
      '#submit' => array(),
      '#ajax' => array(
        'path' => 'admin/config/cmis/views/ajax/',
      ),
      '#limit_validation_errors' => array(),
    );

  }
  return $form;
}

/**
 * Implements hook_theme().
 */
function cmis_extra_theme() {
  return array(
    'cmis_extra_browse_children' => array(
      'arguments' => array('context' => NULL),
      'file' => 'cmis_extra.theme.inc',
    ),
    'cmis_search_results' => array(
      'function' => 'theme_cmis_extra_search_results',
    ),
    'cmis_extra_browser' => array(
      'arguments' => array('context' => NULL),
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function cmis_extra_theme_registry_alter(&$theme_registry) {
  $theme_registry['cmis_browser']['function'] = 'theme_cmis_extra_browser';
  $theme_registry['cmis_browser']['theme path'] = drupal_get_path('module', 'cmis_extra');
  $theme_registry['cmis_browser']['includes'][] = drupal_get_path('module', 'cmis_extra') . '/cmis_extra.theme.inc';

  $theme_registry['cmis_search_results']['function'] = 'theme_cmis_extra_search_results';
  $theme_registry['cmis_search_results']['theme path'] = drupal_get_path('module', 'cmis_extra');
  $theme_registry['cmis_search_results']['includes'][] = drupal_get_path('module', 'cmis_extra') . '/cmis_extra.theme.inc';
}

/**
 * Pane settings callback.
 * @see plugins/content_types/cmis_extra_search_facets_pane.inc
 * Because panel's settings not boot the plugin file, it should here,
 * or have to include the pane file.
 *
 * @param array $form
 * @param array $form_state
 *
 * @return array
 */
function cmis_extra_search_facets_pane_settings_terms_grouping_ajax($form, $form_state) {
  module_load_include('inc', 'cmis_extra', 'plugins/content_types/cmis_extra_search_facets_pane');
  drupal_process_form($form['#form_id'], $form, $form_state);
  return $form['facet_terms_group_rewrite_wrapper']['facet_terms_group_rewrite'];
}

/**
 * Pane settings callback.
 * @see plugins/content_types/cmis_extra_search_facets_num.inc
 * Because panel's settings not boot the plugin file, it should here,
 * or have to include the pane file.
 *
 * @param array $form
 * @param array $form_state
 *
 * @return array
 */
function cmis_extra_search_facets_num_settings_terms_definition_ajax($form, $form_state) {
  module_load_include('inc', 'cmis_extra', 'plugins/content_types/cmis_extra_search_facets_num');
  drupal_process_form($form['#form_id'], $form, $form_state);
  return $form['facet_terms_definitions_wrapper']['facet_terms_definitions'];
}

/**
 * Implements hook_multiple_field_remove_button_field_widgets_alter().
 */
function cmis_extra_multiple_field_remove_button_field_widgets_alter(&$fieldwidgets) {
  $fieldwidgets[] = 'cmis_field_browser';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cmis_extra_form_cmis_browser_admin_settings_alter(&$form, &$form_state, $form_id) {
  $form['cmis_extra'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced'),
    '#description' => t('CMIS extra settings.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['cmis_extra']['cmis_extra_link_pattern'] = array(
    '#type' => 'textfield',
    '#title' => t('Link pattern'),
    '#description' => t('Use "[document_id]" and "[type]" like placeholder for document id and result type.'),
    '#maxlength' => 255,
    '#default_value' => variable_get('cmis_extra_link_pattern', 'http://10.80.1.45/alfresco/service/api/node/workspace/SpacesStore/[document_id]/content/thumbnails/[type]?c=force'),
  );
}

/**
 * Determine whether the user has a given privilege (overridden).
 *
 * @param $string
 *   The permission, such as "administer nodes", being checked for.
 * @param $account
 *   (optional) The account to check, if not given use currently logged in user.
 *
 * @return
 *   Boolean TRUE if the current user has the requested permission.
 *
 * All permission checks in Drupal should go through this function. This
 * way, we guarantee consistent behavior, and ensure that the superuser
 * can perform all actions.
 *
 * @see user_access
 */
function cmis_extra_user_access($string, $type = '') {
  $account = $GLOBALS['user'];

  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }

  // To reduce the number of SQL queries, we cache the user's permissions
  // in a static variable.
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['perm'] = &drupal_static('user_access');
  }
  $perm = &$drupal_static_fast['perm'];
  if (!isset($perm[$account->uid])) {
    $role_permissions = user_role_permissions($account->roles);

    $perms = array();
    foreach ($role_permissions as $one_role) {
      $perms += $one_role;
    }
    $perm[$account->uid] = $perms;
  }

  // Bypass for authenticated user.
  if (cmis_extra_is_user_authenticated_only()) {
    switch ($type) {
      case 'type_cmis_browser': return isset($perm[$account->uid]['cmis extra view browse']);
      case 'type_cmis_views': return isset($perm[$account->uid]['cmis extra view views']);
      case 'type_cmis_field': return isset($perm[$account->uid]['cmis extra view field']);
    }
  }

  return isset($perm[$account->uid][$string]);
}

/**
 * Helper function: Check if user is authenticated only.
 */
function cmis_extra_is_user_authenticated_only() {
  global $user;

  // User #1 has all privileges:
  if ($user->uid == 1) {
    return FALSE;
  }

  $rid = user_role_load_by_name('User');
  return (1 == count($user->roles) && isset($user->roles[$rid->rid])) ? TRUE : FALSE;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Fixes the link to the alfresco files to the proper preview link
 * for the "CMIS Browser" formatter.
 */
function cmis_extra_preprocess_cmis_views_detail(&$variables) {
  foreach ($variables['rows'] as $row) {
    $preview_url = cmis_extra_build_url_target($row->properties['cmis:versionSeriesId'], @$row->properties['cmis:contentStreamMimeTypeOrig']);

    if ($preview_url[1] == 'preview') {
      // add target="_blank" to link-image and link-title
      $row->properties['cmis:link-image'] = preg_replace('/target=\".*?\"/', '', $row->properties['cmis:link-image']);
      $row->properties['cmis:link-image'] = preg_replace('/<a /', '<a target="_blank" ', $row->properties['cmis:link-image']);

      $row->properties['cmis:link-title'] = preg_replace('/target=\".*?\"/', '', $row->properties['cmis:link-title']);
      $row->properties['cmis:link-title'] = preg_replace('/<a /', '<a target="_blank" ', $row->properties['cmis:link-title']);
    }

    $row->properties['cmis:link-image'] = preg_replace('/href=\".*?\"/', 'href="' . $preview_url[0] . '"', $row->properties['cmis:link-image']);
    $row->properties['cmis:link-title'] = preg_replace('/href=\".*?\"/', 'href="' . $preview_url[0] . '"', $row->properties['cmis:link-title']);
  }
}
