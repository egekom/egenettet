<?php

DEFINE('ROSKILDE_MIN_SERACH_WORD',3);
/**
 * @file
 * Roskilde Search Pages alterations.
 */

/**
 * Implements hook_init().
 */
function roskilde_search_init() {
  $env_id = apachesolr_default_environment();
  apachesolr_environment_variable_set($env_id, 'process_response_callback', 'roskilde_search_apachesolr_search_process_response');
}

/**
 * Callback handler: Preprocess apachesolr search results (override).
 *
 * @see apachesolr_search_process_response($response, DrupalSolrQueryInterface $query)
 */
function roskilde_search_apachesolr_search_process_response($response, DrupalSolrQueryInterface $query) {
  $promoted_search_results = array();
  $results = array();
  // We default to getting snippets from the body content and comments.
  $hl_fl = $query->getParam('hl.fl');
  if (!$hl_fl) {
    $hl_fl = array('content', 'ts_comments');
  }
  $total = $response->response->numFound;
  pager_default_initialize($total, $query->getParam('rows'));
  if ($total > 0) {
    $fl = $query->getParam('fl');
    $languages = language_list();
    // 'id' and 'entity_type' are the only required fields in the schema, and
    // 'score' is generated by solr.
    foreach ($response->response->docs as $doc) {
      $extra = array();
      // Allow modules to alter each document and its extra information.
      drupal_alter('apachesolr_search_result', $doc, $extra, $query);

      // Start with an empty snippets array.
      $snippets = array();

      // Find the nicest available snippet.
      foreach ($hl_fl as $hl_param) {
        if (isset($response->highlighting->{$doc->id}->$hl_param)) {
          // Merge arrays preserving keys.
          foreach ($response->highlighting->{$doc->id}->$hl_param as $value) {
            $snippets[$hl_param][] = $value;
          }
        }
      }
      // If there's no snippet at this point, add the teaser.
      if (!$snippets) {
        if (isset($doc->teaser)) {
          $snippets[] = truncate_utf8($doc->teaser, 256, TRUE);
        }
      }

      $hook = 'apachesolr_search_snippets__' . $doc->entity_type;
      $bundle = !empty($doc->bundle) ? $doc->bundle : NULL;
      if ($bundle) {
        $hook .= '__' . $bundle;
      }
      $snippet = theme($hook, array('doc' => $doc, 'snippets' => $snippets));

      if (!isset($doc->content)) {
        $doc->content = $snippet;
      }

      // Normalize common dates so that we can use Drupal's normal date and
      // time handling.
      if (isset($doc->ds_created)) {
        $doc->created = strtotime($doc->ds_created);
      }
      else {
        $doc->created = NULL;
      }

      if (isset($doc->ds_changed)) {
        $doc->changed = strtotime($doc->ds_changed);
      }
      else {
        $doc->changed = NULL;
      }

      if (isset($doc->tos_name)) {
        $doc->name = $doc->tos_name;
      }
      else {
        $doc->name = NULL;
      }

      // Set all expected fields from fl to NULL if they are missing so
      // as to prevent Notice: Undefined property.
      $fl = array_merge($fl, array('path', 'label', 'score'));
      foreach ($fl as $field) {
        if (!isset($doc->{$field})) {
          $doc->{$field} = NULL;
        }
      }

      $fields = (array) $doc;
      // Define our url options. They depend on the document language.
      $url_options = array('absolute' => TRUE);
      if (isset($doc->ss_language) && isset($languages[$doc->ss_language])) {
        $url_options['language'] = $languages[$doc->ss_language];
      }
      $result = array(
        // link is a required field, so handle it centrally.
        'link' => url($doc->path, $url_options),
        // template_preprocess_search_result() runs check_plain() on the title
        // again.  Decode to correct the display.
        'title' => htmlspecialchars_decode($doc->label, ENT_QUOTES),
        // These values are not required by the search module but are provided
        // to give entity callbacks and themers more flexibility.
        'score' => $doc->score,
        'snippets' => $snippets,
        'snippet' => $snippet,
        'fields' => $fields,
        'entity_type' => $doc->entity_type,
        'bundle' => $bundle,
      );

      // Call entity-type-specific callbacks for extra handling.
      $result_callback = apachesolr_entity_get_callback($doc->entity_type, 'result callback', $bundle);
      if (is_callable($result_callback)) {
        $result_callback($doc, $result, $extra);
      }

      $result['extra'] = $extra;

      if (isset($doc->bundle) && "promoted_search_results" == $doc->bundle) {
        $res = &$promoted_search_results;
      }
      else {
        $res = &$results;
      }

      $res[] = $result;
    }

    $results = array_merge($promoted_search_results, $results);
  }
  // Hook to allow modifications of the retrieved results
  foreach (module_implements('apachesolr_process_results') as $module) {
    $process_results_callback = $module . '_apachesolr_process_results';
    $process_results_callback($results, $query);
  }
  return $results;
}

/**
 * Implements hook_js_alter().
 */
function roskilde_search_js_alter(&$javascript) {
  $key = 'sites/all/modules/contrib/apachesolr_autocomplete/jquery-autocomplete/jquery.autocomplete.js';
  if (isset($javascript[$key])) {
    $javascript[$key]['data'] = drupal_get_path('module', 'roskilde_search') . '/js/jquery.autocomplete.override.js';
  }
}

/**
 * Implements hook_menu_alter().
 */
function roskilde_search_menu_alter(&$items) {
  if (isset($items['apachesolr_autocomplete'])) {
    $items['apachesolr_autocomplete']['page callback'] = 'roskilde_search_apachesolr_autocomplete_callback';
  }
}

/**
 * Callback for url apachesolr_autocomplete/autocomplete (override).
 *
 * @param $keys
 *   The user-entered query.
 *
 * @see apachesolr_autocomplete_callback()
 */
function roskilde_search_apachesolr_autocomplete_callback($keys = '', $x = '') {
  if (apachesolr_autocomplete_variable_get_widget() == 'custom') {
    // Keys for custom widget come from $_GET.
    $keys = $_GET['query'];
  }

  $params = array();
  $cmis_results = array();
  $search_type = isset($_GET['search_type']) ? $_GET['search_type'] : FALSE;
  if ($search_type) {
    switch ($search_type) {
      case 'phonebook':
        $params['fq'] = 'bundle:"phonebook"';
        break;

      case 'intranet':
        $cmis_results = roskilde_search_cmis_extra_search_view($keys);
        $params['fq'] = 'bundle:"editorial_news" OR bundle:"short_news" OR bundle:"event" OR bundle:"short_event" OR bundle:"subpage" OR bundle:"topic_page" OR bundle:"unit" OR bundle:"promoted_search_results" OR bundle:"faq_qa" OR bundle:"agreements" OR bundle:"webform"';
        break;
    }
  }

  $suggestions = array();
  $suggestions = array_merge($suggestions, roskilde_search_apachesolr_autocomplete_suggest_word_completion($keys, 5, $params));
  if (apachesolr_autocomplete_variable_get_suggest_keywords() || apachesolr_autocomplete_variable_get_suggest_spellcheck()) {
    $suggestions = array_merge($suggestions, roskilde_search_apachesolr_autocomplete_suggest_additional_term($keys, 5, $params));
  }

  $result = array();
  $show_counts = apachesolr_autocomplete_variable_get_counts();
  if (apachesolr_autocomplete_variable_get_widget() == 'custom') {
    // Place suggestions into new array for returning as JSON.
    foreach ($suggestions as $key => $suggestion) {
      $display = theme($suggestion['theme'], array('suggestion' => $suggestion, 'show_counts' => $show_counts));
      $result[] = array(
        "key" => substr($key,1),
        "display" => $display
      );
    }
  }
  else {
    foreach ($suggestions as $key => $suggestion) {
      $display = theme($suggestion['theme'], array('suggestion' => $suggestion, 'show_counts' => $show_counts));
      $result[substr($key,1)] = $display;
    }
  }

  $result = array_merge(array_slice($result, 0, 5, TRUE), array_slice($cmis_results, 0, 5, TRUE));

  // Add caching headers.
  // The cache lifetime will be:
  //  * apachesolr_autocomplete_cache_maximum_age if it's set and >0
  //  * else, use page_cache_maximum_age.
  $cache_max_age = variable_get('apachesolr_autocomplete_cache_maximum_age', -1);
  if ($cache_max_age == -1) {
    $cache_max_age = variable_get('page_cache_maximum_age', 0);
  }
  if ($cache_max_age > 0) {
    // Only add the caching headers if necessary.
    drupal_add_http_header('Cache-Control', 'public, max-age=' . $cache_max_age);
  }
  // Send the output.
  drupal_json_output($result);
  exit();
}

/**
 * Helper function that suggests ways to complete partial words (override).
 *
 * For example, if $keys = "learn", this might return suggestions like:
 *    learn, learning, learner, learnability.
 * The suggested terms are returned in order of frequency (most frequent first).
 *
 * @see apachesolr_autocomplete_suggest_word_completion()
 */
function roskilde_search_apachesolr_autocomplete_suggest_word_completion($keys, $suggestions_to_return = 5, $extra_params = array()) {
  /**
   * Split $keys into two:
   *  $first_part will contain all complete words (delimited by spaces). Can be empty.
   *  $last_part is the (assumed incomplete) last word. If this is empty, don't suggest.
   * Example:
   *  $keys = "learning dis" : $first_part = "learning", $last_part = "dis"
   */
  preg_match('/^(:?(.* |))([^ ]+)$/', $keys, $matches);
  $first_part = @$matches[2];
  // Make sure $last_part contains meaningful characters
  $last_part = preg_replace('/[' . PREG_CLASS_UNICODE_WORD_BOUNDARY . ']+/u', '', @$matches[3]);
  if ($last_part == '') {
    return array();
  }
  // Ask Solr to return facets that begin with $last_part; these will be the suggestions.
  $params = array_merge($extra_params, apachesolr_autocomplete_basic_params($suggestions_to_return));
  $params['facet.prefix'] = $last_part;
  // Get array of themed suggestions.
  $result = apachesolr_autocomplete_suggest($first_part, $params, $keys, $suggestions_to_return);
  if ($result && $result['suggestions']) {
    return $result['suggestions'];
  } else {
    return array();
  }
}

/**
 * Helper function that suggests additional terms to search for (override).
 *
 * For example, if $keys = "learn", this might return suggestions like:
 *    learn student, learn school, learn mathematics.
 * The suggested terms are returned in order of frequency (most frequent first).
 *
 * @see apachesolr_autocomplete_suggest_additional_term()
 */
function roskilde_search_apachesolr_autocomplete_suggest_additional_term($keys, $suggestions_to_return = 5, $extra_params = array()) {
  $keys = trim($keys);
  $keys = check_plain($keys);
  if ($keys == '') {
    return array();
  }
  // Return no suggestions when $keys consists of only word delimiters
  if (drupal_strlen(preg_replace('/[' . PREG_CLASS_UNICODE_WORD_BOUNDARY . ']+/u', '', $keys)) < 1) {
    return array();
  }

  // Ask Solr to return facets from the 'spell' field to use as suggestions.
  $params = array_merge($extra_params, apachesolr_autocomplete_basic_params($suggestions_to_return));

  // Initialize arrays
  $suggestions = array();
  $replacements = array();

  // Get array of themed suggestions.
  $result = apachesolr_autocomplete_suggest($keys, $params, $keys, $suggestions_to_return);
  if ($result && apachesolr_autocomplete_variable_get_suggest_keywords()) {
    if (isset($result['suggestions']) && sizeof($result['suggestions'])) {
      $suggestions = array_merge($suggestions, $result['suggestions']);
    }
  }

  // Suggest using the spellchecker
  if (apachesolr_autocomplete_variable_get_suggest_spellcheck()) {
    if (isset($result['response']->spellcheck) && isset($result['response']->spellcheck->suggestions)) {
      $spellcheck_suggestions = get_object_vars($result['response']->spellcheck->suggestions);
      foreach($spellcheck_suggestions as $word => $value) {
        $replacements[$word] = $value->suggestion[0];
      }
      if (count($replacements)) {
        $new_keywords = strtr($keys, $replacements);
        if ($new_keywords != $keys) {
          // Place spellchecker suggestion before others
          $suggestions = array_merge(array('*' . $new_keywords => array('theme' => 'apachesolr_autocomplete_spellcheck', 'suggestion' => $new_keywords)), $suggestions);
        }
      }
    }
  }

  return $suggestions;
}

/**
 * Helper function: Cmis autocomplete suggestions.
 */
function roskilde_search_cmis_extra_search_view($keys = '', $offset = 0) {
  module_load_include('api.inc', 'cmis');
  $cmisquery = "select d.*, SCORE() as relevance FROM cmis:document as d WHERE CONTAINS(d, 'cmis:name:(".$keys.")^4') ORDER BY relevance DESC";
  // Log queries send to Alfresko
  watchdog('Alfresko Search', $cmisquery);

  if ($cmisquery && $keys) {
    try {
      $repository = cmis_get_repository();
      $repoId = !empty($repository->repositoryId) ? $repository->repositoryId : 'default';

      $query_result = cmisapi_query($repoId, $cmisquery, array('skipCount' => $offset));
    }
    catch (CMISException $e) {
      cmis_error_handler('cmis_query', $e);
    }
  }

  $cmis_results = array();
  if (isset($query_result) && isset($query_result->numItems)) {
    $rows = $query_result->objectList;

    foreach ($rows as $child) {
      $cmis_results[] = array(
        'key' => $child->properties['cmis:name'],
        'display' => '<div class="apachesolr_autocomplete suggestion">' . $child->properties['cmis:name'] . '</div>',
      );
    }
  }

  return $cmis_results;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function roskilde_search_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && !empty($plugin_type)) {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_drupal_goto_alter().
 *
 * Redirect the main serch form.
 */
function roskilde_search_drupal_goto_alter(&$path, &$options, $http_response_code) {

  if (strpos($path, 'search') !== FALSE) {

    // Keep tye news|events types.
    if (!empty($_POST['apachesolr_panels_search_form'])) {
      if (!empty($_GET['news-type'])) {
        $options['query']['news-type'] = $_GET['news-type'];
      }
      elseif (!empty($_GET['events-type'])) {
        $options['query']['events-type'] = $_GET['events-type'];
      }

      if ("apachesolr_panels_search_form" == $_POST['form_id'] && FALSE !== strpos($path, 'search/phonebook')) {
        foreach (_roskilde_search_map_field() as $key) {
          if (isset($_GET[$key])) {
            $options['query'][$key] = $_GET[$key];
          }
        }
      }
    }

    // Get apachesolr search pages.
    $search_pages = apachesolr_search_load_all_search_pages();
    if (isset($search_pages['core_search'])) {
      $core_search = $search_pages['core_search'];
      if (strpos($path, $core_search['search_path']) === 0) {
        $path = str_replace($core_search['search_path'], 'search/global', $path);
        return;
      }
    }
    // Get default search.
    $info = search_get_default_module_info();
    if ($info) {
      if (current_path() == 'search/phonebook') {
        $path = str_replace('search/' . $info['path'], current_path(), $path);
      }
      elseif (strpos($path, 'search/' . $info['path']) === 0) {
        $path = str_replace('search/' . $info['path'], 'search/global', $path);
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function roskilde_search_views_pre_render(&$view) {
  // Inherited from roskilde.
  if (FALSE && array_key_exists('field_primary_channel', $view->field)) {
    foreach ($view->result as $row) {
      $query = array();
      $query['f'][] = "im_field_secondary_channel:{$row->field_field_primary_channel[0]['raw']['tid']}";
      $row->field_field_primary_channel[0]['rendered']['#href'] = '/search/news';
      $row->field_field_primary_channel[0]['rendered']['#options']['query'] = $query;
    }
  }
}

/**
 * Implements hook_preprocess_panels_pane().
 */
function roskilde_search_preprocess_panels_pane(&$vars) {
  if (
    !isset($vars['content']) ||
    !is_array($vars['content']) ||
    !array_key_exists('#field_name', $vars['content'])
  ) {
    return;
  }

  $content = &$vars['content'];
  $phonebook_fields_map = _roskilde_search_map_field();
  if (array_key_exists($content['#field_name'], $phonebook_fields_map)) {
    if ("field_unit" != $content['#field_name']) {
      $path = 'search/phonebook';
      $options = array(
        'query' => array($phonebook_fields_map[$content['#field_name']] => $content['#items'][0]['tid']),
      );
      $content[0]['#markup'] = l($content[0]['#markup'], $path, $options);
      $content[0]['#phonebook_search_url'] = url($path, $options);
    }
  }
}

/**
 * Implements hook_preprocess_taxonomy_term().
 */
function roskilde_search_preprocess_taxonomy_term(&$variables) {
  if (isset($variables['elements']['#phonebook_search_url'])) {
    $variables['phonebook_search_url'] = $variables['elements']['#phonebook_search_url'];
  }
}

/**
 * Implements hook_node_view_alter().
 */
function roskilde_search_node_view_alter(&$build) {
   if ("phonebook" == $build['#bundle'] && "my_page" == $build['#view_mode']) {
     foreach (_roskilde_search_map_field() as $field_name => $index) {
       if (isset($build[$field_name]) && !empty($build[$field_name])) {
         $query = array($index => $build[$field_name]['#items'][0]['taxonomy_term']->tid);
         $build[$field_name][0]['#markup'] = l($build[$field_name][0]['#markup'], 'search/phonebook', array('query' => $query));
       }
     }
   }
  // Inherited from roskilde.
  if (FALSE && "editorial_news" == $build['#bundle'] && isset($build['field_primary_channel'])) {
    if (!empty($build['field_primary_channel']['#items'][0]['tid'])) {
      $query = array();
      $query['f'][] = "im_field_secondary_channel:{$build['field_primary_channel']['#items'][0]['tid']}";
      $build['field_primary_channel'][0]['#href'] = '/search/news';
      $build['field_primary_channel'][0]['#options']['query'] = $query;
    }
  }
}

/**
 * Implements hook_field_attach_view_alter().
 */
function roskilde_search_field_attach_view_alter(&$result, $context) {
  if (!empty($result['field_tags'])) {
    switch ($result['field_tags']['#bundle']) {
      case 'editorial_news':
        $search = 'news';
        break;

      case 'event':
        $search = 'events';
        break;

      default :
        $search = 'pages';
    }
    foreach (element_children($result['field_tags']) as $key) {
      $tid = $result['field_tags'][$key]['#options']['entity']->tid;
      $query = array('f' => array("im_field_tags:$tid"));
      $result['field_tags'][$key]['#href'] = "/search/$search";
      $result['field_tags'][$key]['#options']['query'] = $query;
    }
  }

  if (!empty($result['field_phonebook_contact']['#items'][0]['target_id'])) {
    $target = $result['field_phonebook_contact']['#items'][0]['target_id'];
    foreach (array_flip(_roskilde_search_map_field()) as $field_name) {
      if (isset($result['field_phonebook_contact'][0]['node'][$target][$field_name])) {
        $result['field_phonebook_contact'][0]['node'][$target][$field_name]['#pre_render'][] = 'roskilde_search_change_taxonomy_link';
      }
    }
  }
}

/**
 * Render API callback: Changed #href attribute into the term link.
 */
function roskilde_search_change_taxonomy_link($element) {
  $phonebook_fields_map = _roskilde_search_map_field();
  if (array_key_exists($element['#field_name'], $phonebook_fields_map)) {
    $element[0]['#href'] = 'search/phonebook';
    $element[0]['#options']['query'] = array($phonebook_fields_map[$element['#field_name']] => $element['#items'][0]['tid']);
  }
  return $element;
}

/**
 * Helper function: Get mapped indexes by phonebook fields.
 */
function _roskilde_search_map_field() {
  return array(
    'field_unit' => 'im_field_unit',
    'field_department' => 'im_field_department',
    'field_work_place' => 'im_field_work_place',
    'field_politiske_udvalg' => 'im_field_politiske_udvalg',
  );
}

/**
 * Exact phrase biasing query alter helper.
 *
 * @param DrupalSolrQueryInterface $query
 */
function _roskilde_search_apachesolr_query_alter_exact_match_boost(DrupalSolrQueryInterface $query, $field_name = 'label', $distance = 0) {
  if ($query) {
    // Initialisation.
    $default_bias = 10;
    $env_id = $query->solr('getId');
    $exact_match_boost = variable_get('roskilde_search_exact_match_bias', 25);

    // Calculate boost based on configured bias values.
    $qf = apachesolr_environment_variable_get($env_id, 'field_bias');
    $bias_confiured = isset($qf[$field_name]) ? $qf[$field_name] : $default_bias;
    $bias_to_use = $bias_confiured * $exact_match_boost;

    // No word distance
    $query->replaceParam('ps', $distance);

    // Boost only label property.
    $query->replaceParam('pf', $field_name . '^' . $bias_to_use);
  }
}

/**
 * Implements hook_apachesolr_query_alter().
 *
 * Adds certain fields to queries, etc.
 */
function roskilde_search_apachesolr_query_alter(DrupalSolrQueryInterface $query) {
  // Check current path.
  $get_params = drupal_get_query_parameters();
  if (arg(0) == 'search') {
    global $allow_wildcard_search;
    $allow_wildcard_search = 1;

    // Add search in title
    $query->addParam('mm', ROSKILDE_MIN_SERACH_WORD);
    switch (arg(1)) {
      case 'news':
        _roskilde_search_apachesolr_query_alter_exact_match_boost($query);
        // Add field params to query.
        $query->addParam('fl', 'dm_field_date');
        $query->addParam('fl', 'ss_field_archive_field');
        // Inherited from roskilde.
        if (FALSE) {
          $query->addParam('fl', 'im_field_secondary_channel');
        }
        $query->addParam('fl', 'sm_vid_Channel');
        $filter = "archive";
        if (!empty($get_params['news-type']) && $get_params['news-type'] == 'archive') {
          $filter_exclude = FALSE;
        }
        else {
          $filter_exclude = TRUE;
        }
        $query->addFilter('ss_field_archive_field', "{$filter}", $filter_exclude);

        break;

      case 'events':
        _roskilde_search_apachesolr_query_alter_exact_match_boost($query);
        $query->addParam('fl', 'dm_field_datetime');
        $query->addParam('fl', 'dm_field_datetime_end');
        $query->addParam('fl', 'sm_field_place');
        $now = facetapi_isodate(strtotime("now", time()));

        if (!empty($get_params['events-type']) && $get_params['events-type'] == 'previous') {
          $filter = "[* TO $now]";
        }
        else {
          $filter = "[$now TO *]";
        }

        $query->addFilter('dm_field_datetime_end', "{$filter}");
        // Inherited from roskilde.
        if (FALSE) {
          $query->addParam('fl', 'im_field_secondary_channel');
          $query->addParam('fl', 'sm_vid_Channel');
        }
        break;

      case 'global':
        _roskilde_search_apachesolr_query_alter_exact_match_boost($query);
        // Add field params to query.
        $query->addParam('fl', 'dm_field_datetime');
        $query->addParam('fl', 'sm_field_place');
        // Add search keywords field to query manually
        // because we do not want to display it in search snippet.
        $query->addParam('qf', 'ts_field_search_keywords^0.1');
        $query->addParam('fl', 'ss_field_archive_field');
        $query->addParam('fl', 'ss_field_link__title');
        $query->addParam('fl', 'ss_field_link__url');
        break;

      case 'phonebook':
        $query->addParam('fl', 'ss_field_name');
        $query->addParam('fl', 'tls_field_name');
        _roskilde_search_apachesolr_query_alter_exact_match_boost($query, 'tls_field_name', 1);

        $query->addParam('fl', 'ss_field_email');
        $query->addParam('fl', 'ss_field_phone_number');
        $query->addParam('fl', 'ss_field_mobile_number');
        $query->addParam('fl', 'ss_field_main_number');
        $query->addParam('fl', 'ss_field_image');

        $query->addParam('fl', 'ss_field_position');
        $query->addParam('fl', 'ss_field_unit');
        $query->addParam('fl', 'tls_field_unit__page_title');

        $query->addParam('fl', 'ss_field_center');
        $query->addParam('fl', 'ss_field_department');
        $query->addParam('fl', 'ss_field_work_place');
       
        $query->addParam('fl', 'sm_vid_Phonebook___Center');
        $query->addParam('fl', 'sm_vid_Phonebook___Work_place');
        $query->addParam('fl', 'sm_vid_Phonebook___Department');
       
        foreach (_roskilde_search_map_field() as $key) {
          if (isset($_GET[$key])) {
            $query->addParam('fq', $key . ':' . $_GET[$key]);
            break;
          }
        }
        break;
    }
  }
}

/**
 * Implements hook_apachesolr_prepare_query().
 * Used to modify our sorts
 */
function roskilde_search_apachesolr_query_prepare(DrupalSolrQueryInterface $query) {

  if (arg(0) == 'search') {
    $query->removeAvailableSort('score');

    switch (arg(1)) {
      case 'phonebook':
        $query->removeAvailableSort('ds_created');
        $query->removeAvailableSort('bundle');
        $query->removeAvailableSort('sort_name');

        $query->setAvailableSort('sort_field_department', array(
          'title' => t('Department'),
          'default' => 'asc',
        ));
        $query->setAvailableSort('sort_field_name', array(
          'title' => t('Name'),
          'default' => 'asc'
        ));
        $query->setAvailableSort('sort_field_work_place', array(
          'title' => t('Work Place'),
          'default' => 'asc'
        ));
//        $qargs = drupal_get_query_parameters();
//        if (empty($qargs['solrsort'])) {
//          $query->setSolrSort('sort_field_name', 'asc');
//        }
        break;

      case 'events':
        $query->removeAvailableSort('ds_created');
        $query->setAvailableSort('ds_field_date_field', array('title' => t('Date'), 'default' => 'desc'));
      case 'global':
      case 'pages':
      case 'article':
      case 'news':
      case 'faq':
      case 'agreements':
        $query->removeAvailableSort('bundle');
        $query->removeAvailableSort('sort_name');
        // Inherited from roskilde.
        if (FALSE) {
          $query->setDefaultSort('ds_created', 'desc');
        }
        break;
    }
  }
}

/**
 * Implements hook_facetapi_facet_info_alter().
 */
function roskilde_search_facetapi_facet_info_alter(array &$facet_info, array $searcher_info) {
  if ("apachesolr" == $searcher_info['adapter']) {
    // @see apachesolr_entity_field_facets()
    $facets = array();

    foreach (roskilde_search_apachesolr_entity_fields() as $field_nm => $entity_fields) {
      foreach ($entity_fields as $field_info) {
        if (!empty($field_info['facets'])) {
          $field = apachesolr_index_key($field_info);
          $facets[$field] = array(
            'label' => check_plain($field_info['display_name']),
            'dependency plugins' => $field_info['dependency plugins'],
            'field api name' => $field_info['field']['field_name'],
            'description' => t('Filter by field @field of type @type.', array(
              '@type' => $field_info['field']['type'],
              '@field' => $field_info['field']['field_name'],
            )),
            'map callback' => $field_info['map callback'],
            'map options' => $field_info,
            'hierarchy callback' => $field_info['hierarchy callback'],
          );
          if (!empty($field_info['facet mincount allowed'])) {
            $facets[$field]['facet mincount allowed'] = $field_info['facet mincount allowed'];
          }
          if (!empty($field_info['facet missing allowed'])) {
            $facets[$field]['facet missing allowed'] = $field_info['facet missing allowed'];
          }
          if (!empty($field_info['query types'])) {
            $facets[$field]['query types'] = $field_info['query types'];
          }
          if (!empty($field_info['allowed operators'])) {
            $facets[$field]['allowed operators'] = $field_info['allowed operators'];
          }
          // TODO : This is actually deprecated but we should still support
          // older versions of facetapi. We should remove once facetapi has RC1
          // For reference : http://drupal.org/node/1161444
          if (!empty($field_info['query type'])) {
            $facets[$field]['query type'] = $field_info['query type'];
          }
          if (!empty($field_info['min callback'])) {
            $facets[$field]['min callback'] = $field_info['min callback'];
          }
          if (!empty($field_info['max callback'])) {
            $facets[$field]['max callback'] = $field_info['max callback'];
          }
          if (!empty($field_info['map callback'])) {
            $facets[$field]['map callback'] = $field_info['map callback'];
          }
          if (!empty($field_info['alter callbacks'])) {
            $facets[$field]['alter callbacks'] = $field_info['alter callbacks'];
          }

          // @see facetapi_get_facet_info()
          // @see http://drupal.org/node/1161434
          // Converts "query type" to an array and stores in "query types".
          // @todo Remove in later versions.
          if (isset($facets[$field]['query type']) && !isset($facets[$field]['query types'])) {
            $facets[$field]['query types'] = array($facets[$field]['query type']);
          }

          $facet_info[$field] = $facets[$field] + array(
            'name' => $field,
            'label' => $field,
            'description' => '',
            'field' => $field,
            'field alias' => isset($info['field']) ? $info['field'] : $field,
            'field api name' => FALSE,
            'field api bundles' => array(),
            'query types' => array('term'),
            'alter callbacks' => array(),
            'dependency plugins' => array(),
            'default widget' => FALSE,
            'allowed operators' => array(FACETAPI_OPERATOR_AND => TRUE, FACETAPI_OPERATOR_OR => TRUE),
            'facet missing allowed' => FALSE,
            'facet mincount allowed' => FALSE,
            'weight' => 0,
            'map callback' => FALSE,
            'map options' => array(),
            'hierarchy callback' => FALSE,
            'values callback' => FALSE,
            'min callback' => FALSE,
            'max callback' => FALSE,
            'default sorts' => array(
              array('active', SORT_DESC),
              array('count', SORT_DESC),
              array('display', SORT_ASC),
            ),
          );

          // @see http://drupal.org/node/1161434
          // Makes sure old style "query type" is present.
          // @todo Remove in later versions.
          if (!isset($facet_info[$field]['query type'])) {
            $type = key($facet_info[$field]['query types']);
            $facet_info[$field]['type'] = $type;
          }
        }
      }
    }
  }
}

/**
 * Returns array containing information about node fields that should be indexed
 *
 * @see apachesolr_entity_fields()
 */
function roskilde_search_apachesolr_entity_fields($entity_type = 'node') {
  $fields = array();

  // Get the field mappings from apachesolr_field_mappings() implementations.
  $mappings = apachesolr_get_field_mappings($entity_type);

  $modules = system_get_info('module');
  $instances = field_info_instances($entity_type);
  $field_name = 'field_secondary_channel';
  $field = field_info_field($field_name);

  $row = array();
  if (isset($field['bundles'][$entity_type]) && (isset($mappings['per-field'][$field_name]) || isset($mappings[$field['type']]))) {
    // Find the mapping.
    if (isset($mappings['per-field'][$field_name])) {
      $row = $mappings['per-field'][$field_name];
    }
    else {
      $row = $mappings[$field['type']];
    }
    // The field info array.
    $row['field'] = $field;

    // Cardinality: The number of values the field can hold. Legal values
    // are any positive integer or FIELD_CARDINALITY_UNLIMITED.
    if ($row['field']['cardinality'] != 1) {
      $row['multiple'] = TRUE;
    }

    // @todo: for fields like taxonomy we are indexing multiple Solr fields
    // per entity field, but are keying on a single Solr field name here.
    $function = !empty($row['name callback']) ? $row['name callback'] : NULL;
    if ($function && is_callable($function)) {
      $row['name'] = $function($field);
    }
    else {
      $row['name'] = $field['field_name'];
    }
    $row['module_name'] = $modules[$field['module']]['name'];
    // Set display name
    $display_name = array();
    foreach ($field['bundles'][$entity_type] as $bundle) {
      $row['display_name'] = $instances[$bundle][$field_name]['label'];
      $row['bundles'][] = $bundle;
    }
    // Only add to the $fields array if some instances are displayed for the search index.
    if (!empty($row['bundles'])) {
      // Use the Solr index key as the array key.
      $fields[apachesolr_index_key($row)][] = $row;
    }
  }

  return $fields;
}

/**
 * Implements hook_apachesolr_index_document_build().
 *
 * Add search keywords field to solr index manually
 * because we do not want to display it in search snippet.
 */
function roskilde_search_apachesolr_index_document_build($document, $entity, $entity_type) {


  if ($entity_type == 'node' && $entity->type == 'promoted_search_results') {
    if (!empty($entity->field_search_keywords)) {
          $document->addField('ts_field_search_keywords', $entity->field_search_keywords['und'][0]['value']);
          $document->addField('ss_field_link__title', $entity->field_link['und'][0]['title']);
          $document->addField('ss_field_link__url', $entity->field_link['und'][0]['url']);
      }
      $document->setField('label','');
  }

  if ($entity_type == 'node' && $entity->type == 'topic_page') {
    if (!empty($entity->field_search_keywords)) {
      $document->addField('ts_field_search_keywords', $entity->field_search_keywords['und'][0]['value']);
    }
  }
  if ($entity_type == 'node' && $entity->type == 'phonebook') {
    $name = trim($entity->field_first_name[LANGUAGE_NONE][0]['value'] . ' ' . $entity->field_last_name[LANGUAGE_NONE][0]['value']);
    $document->addField('tls_field_name', $name);
    $document->addField('ss_field_name', $name);

    
    $document->addField('ss_field_position', empty($entity->field_position[LANGUAGE_NONE]) ? '' : $entity->field_position[LANGUAGE_NONE][0]['value']);


    $document->addField('ss_field_email', empty($entity->field_email[LANGUAGE_NONE]) ? '' : $entity->field_email[LANGUAGE_NONE][0]['email']);
    $document->addField('ss_field_phone_number', empty($entity->field_phone_number[LANGUAGE_NONE]) ? '' : $entity->field_phone_number[LANGUAGE_NONE][0]['value']);
    $document->addField('ss_field_mobile_number', empty($entity->field_mobile_number[LANGUAGE_NONE]) ? '' : $entity->field_mobile_number[LANGUAGE_NONE][0]['value']);
    $document->addField('ss_field_local_phone_number', empty($entity->field_local_phone_number[LANGUAGE_NONE]) ? '' : $entity->field_local_phone_number[LANGUAGE_NONE][0]['value']);

    $document->addField('ss_field_image', empty($entity->field_phonebook_image[LANGUAGE_NONE]) ? '' : $entity->field_phonebook_image[LANGUAGE_NONE][0]['uri']);

     $document->addField('ts_field_phone_number', empty($entity->field_phone_number[LANGUAGE_NONE]) ? '' : preg_replace('/\s+/','',$entity->field_phone_number[LANGUAGE_NONE][0]['value']));
     $document->addField('ts_field_mobile_number', empty($entity->field_mobile_number[LANGUAGE_NONE]) ? '' : preg_replace('/\s+/','',$entity->field_mobile_number[LANGUAGE_NONE][0]['value']));
     $document->addField('ts_field_local_phone_number', empty($entity->field_local_phone_number[LANGUAGE_NONE]) ? '' : preg_replace('/\s+/','',$entity->field_local_phone_number[LANGUAGE_NONE][0]['value']));

      // Add single value fields for Area and Unit.
    
    $__phonebook_Center = $document->getField('sm_vid_Phonebook___Center');
    $__phonebook_Department = $document->getField('sm_vid_Phonebook___Department');
    $__phonebook_Work_place = $document->getField('sm_vid_Phonebook___Work_place');


    $document->addField('ss_field_center', array_pop($__phonebook_Center['value']));
    $document->addField('ss_field_work_place',array_pop( $__phonebook_Work_place['value']));
    $document->addField('ss_field_department', array_pop($__phonebook_Department['value']));
  }
  if ($entity_type == 'node' && ($entity->type == 'event' || $entity->type == 'short_event')) {
    if (!empty($entity->field_datetime)) {
      // Add a new field to solr since field_datetime is indexed as dm_fielddate
      // and solr doesnt allowed sorting on multi fields.
      $tz = new DateTimeZone('UTC');
      $date = date_create($entity->field_datetime['und']['0']['value'], $tz);
      $index_value = apachesolr_date_iso($date->format('U'));
      $document->addField('ds_field_date_field', $index_value);
    }
  }
  if ($entity_type == 'node' && ($entity->type == 'editorial_news' || $entity->type == 'short_news')) {
    $index_value = empty($entity->archive) || empty($entity->archive['archive_state']) ? 'active' : $entity->archive['archive_state'];
    $document->addField('ss_field_archive_field', $index_value);

    if ($entity_type == 'short_news') {
      $index_value = apachesolr_date_iso($entity->created);
      $document->addField('dm_field_date', $index_value);
    }
  }

  // Inherited from roskilde.
  if (FALSE && $entity_type == 'node') {
    switch ($entity->type) {
      case 'event':
      case 'short_event':
      case 'editorial_news':
      case 'short_news':
        $field = field_info_field("field_secondary_channel");
        $mappings = apachesolr_get_field_mappings('node');
        $field_info = array(
          'index_type' => $mappings[$field['type']]['index_type'],
          'name' => $field['field_name'],
          'multiple' => $field['cardinality'] != 1 ? TRUE : FALSE,
        );
        $key = apachesolr_index_key($field_info);
        $fields = apachesolr_term_reference_indexing_callback($entity, $field['field_name'], $key, $field_info);
        foreach ($fields as $field) {
          // It's fine to use this method also for single value fields.
          $document->setMultiValue($field['key'], $field['value']);
        }
        break;
    }
  }
}

function roskilde_search_get_unit_page_title_by_tid($tid) {
  $select = db_select('field_data_field_unit_page', 'fup');
  $select->innerJoin('node', 'n', 'n.nid = fup.field_unit_page_target_id');
  $select->addField('n', 'title');
  $select->condition('fup.entity_type', 'taxonomy_term');
  $select->condition('fup.bundle', 'phonebook_unit');
  $select->condition('fup.entity_id', $tid);

  return $select->execute()->fetchCol();
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Override the search-results.tpl.php for phonebook
 */
function roskilde_search_preprocess_search_results(&$variables) {
  if (arg(0) == 'search') {
    if (arg(1) == 'phonebook') {

      $solr_query = apachesolr_current_query(apachesolr_default_environment());
      $solr_current_sort = $solr_query->getSolrsort();

      $table_headers = array();

      $table_headers['name'] = theme('apachesolr_sort_link', array(
        'text' => t('Name'),
        'path' => current_path(),
        'active' => $solr_current_sort['#name'] == 'sort_field_name',
        'direction' => $solr_current_sort['#name'] == 'sort_field_name' ? $solr_current_sort['#direction'] : 'ascdesc',
        'options' => array(
          'query' => array(
            'solrsort' => 'sort_field_name ' . ($solr_current_sort['#name'] == 'sort_field_name' ? ($solr_current_sort['#direction'] == 'asc' ? 'desc' : 'asc') : 'asc'),
          )
        ),
      ));

      $table_headers['username'] = theme('apachesolr_sort_link', array(
        'text' => t('Username'),
        'path' => current_path(),
        'active' => $solr_current_sort['#name'] == 'sort_name',
        'direction' => $solr_current_sort['#name'] == 'sort_name' ? $solr_current_sort['#direction'] : 'ascdesc',
        'options' => array(
          'query' => array(
            'solrsort' => 'sort_name ' . ($solr_current_sort['#name'] == 'sort_name' ? ($solr_current_sort['#direction'] == 'asc' ? 'desc' : 'asc') : 'asc'),
          )
        ),
      ));

    $table_headers['work_place'] = theme('apachesolr_sort_link', array(
        'text' => t('Work Place'),
        'path' => current_path(),
        'active' => $solr_current_sort['#name'] == 'sort_field_work_place',
        'direction' => $solr_current_sort['#name'] == 'sort_field_work_place' ? $solr_current_sort['#direction'] : 'ascdesc',
        'options' => array(
          'query' => array(
            'solrsort' => 'sort_field_work_place ' . ($solr_current_sort['#name'] == 'sort_field_work_place' ? ($solr_current_sort['#direction'] == 'asc' ? 'desc' : 'asc') : 'asc'),
          )
        ),
      ));

     $table_headers['department'] = theme('apachesolr_sort_link', array(
        'text' => t('Department'),
        'path' => current_path(),
        'active' => $solr_current_sort['#name'] == 'sort_field_department',
        'direction' => $solr_current_sort['#name'] == 'sort_field_department' ? $solr_current_sort['#direction'] : 'ascdesc',
        'options' => array(
          'query' => array(
            'solrsort' => 'sort_field_department ' . ($solr_current_sort['#name'] == 'sort_field_department' ? ($solr_current_sort['#direction'] == 'asc' ? 'desc' : 'asc') : 'asc'),
          )
        ),      
      ));


      $table_headers['phone'] = t('Phone');

      $table_headers['email'] = t('Email');

      $variables['table_headers'] = $table_headers;

      $variables['theme_hook_suggestions'][] = 'search_results__phonebook';
    }
  }
}

/**
 * Implements hook_preprocess_search_result().
 *
 * Attach properly formatted dates to the search result.
 */
function roskilde_search_preprocess_search_result(&$variables) {
  if (arg(0) == 'search') {
    switch (arg(1)) {
      case 'pages':
      case 'news':
      case 'faq':
      case 'agreements':
        if (empty($variables['result']['fields']['dm_field_date'])) {
          $variables['result']['fields']['dm_field_date'] = array($variables['result']['fields']['ds_created']);
        }
        $timestamp = strtotime($variables['result']['fields']['dm_field_date'][0]);
        $variables['result']['fields']['dm_field_date'] = $timestamp ? format_date($timestamp) : '';
        break;

      case 'events':
        if (isset($variables['result']['fields']['dm_field_datetime'])) {
          $event_date_timestamp = strtotime($variables['result']['fields']['dm_field_datetime'][0]);
          $variables['result']['fields']['dm_field_datetime'] = array(
            'day' => format_date($event_date_timestamp, 'roskilde_only_day'),
            'month' => format_date($event_date_timestamp, 'roskilde_only_month'),
            'time' => format_date($event_date_timestamp, 'roskilde_only_time'),
          );
        }
        break;

      case 'global':
        $variables['theme_hook_suggestions'][] = 'search_result__apachesolr_search__global';
        // If result is event display the event date instead
        // of node creation date.
        if ($variables['result']['bundle'] == 'event' || $variables['result']['bundle'] == 'short_event') {
          $timestamp = strtotime($variables['result']['fields']['dm_field_datetime'][0]);
        }
        else {
          $timestamp = $variables['result']['fields']['created'];
        }

        $variables['result']['display_date'] = $timestamp ? format_date($timestamp) : '';

        if (!empty($variables['result']['bundle'])) {
          $bundle_link_url = '';
          $bundle_link_opts = array();
          switch ($variables['result']['bundle']) {
            case 'editorial_news':
            case 'short_news':
              $bundle_link_url = 'search/news/' . arg(2);
              if (!empty($variables['result']['fields']['ss_field_archive_field']) && $variables['result']['fields']['ss_field_archive_field'] == 'archive') {
                $bundle_link_opts['query'] = array('news-type' => 'archive');
              }
              break;

            case 'event':
            case 'short_event':
              $bundle_link_url = 'search/events/' . arg(2);
              if (!empty($variables['result']['node']->dm_field_datetime[0])) {
                $time = strtotime($variables['result']['node']->dm_field_datetime[0]);
                if ($time < time()) {
                  $bundle_link_opts['query'] = array('events-type' => 'previous');
                }
              }
              break;

            case 'subpage':
            case 'topic_page':
            case 'unit':
            case 'promoted_search_results':
            case 'faq_qa':
            case 'agreements':
              if (isset($variables['result']['fields']['ss_field_link__title'])) {
                $variables['title'] = $variables['result']['fields']['ss_field_link__title'];
                $variables['url'] = $GLOBALS['base_url'] . '/' . $variables['result']['fields']['ss_field_link__url'];
              }
              $bundle_link_url = 'search/pages/' . arg(2);
              break;
          }
        }
        $variables['bundle_link'] = l($variables['result']['fields']['bundle_name'], rtrim($bundle_link_url, '/'), $bundle_link_opts);
        break;

      case 'phonebook':
        $styles = image_styles();
        if (isset($styles['phonebook_search_image'])) {
          $variables['phonebook_search_image_settings'] = $styles['phonebook_search_image']['effects'][3]['data'];
        }
        $variables['theme_hook_suggestions'][] = 'search_result__apachesolr_search__phonebook';

        break;
    }

    if (arg(2) && !empty($variables['title'])) {
      $variables['title'] = preg_replace('#' . preg_quote(arg(2), '#') . '#iu', '<em>\\0</em>', $variables['title']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add query string to the solr (alfresco) search form
 *
 * @param $form
 * @param $form_state
 */
function roskilde_search_form_apachesolr_panels_search_form_alter(&$form, &$form_state) {
  $current_menu_item = menu_get_item();
  if (!empty($current_menu_item['page_arguments'][0]) && !empty($current_menu_item['page_arguments'][1]) && $current_menu_item['page_arguments'][0] == 'search_alfresco') {
    $form['apachesolr_panels_search_form']['#default_value'] = $current_menu_item['page_arguments'][1];
  }

  if (arg(0) == 'search' && arg(1) != 'phonebook') {
    $phonebook_search_url = url(rtrim('search/phonebook/' . arg(2), '/'));
    $form['apachesolr_panels_search_form']['#description'] = sprintf(t('Looking for a person, see in <a href="%s">phonebook</a>'), $phonebook_search_url);
  }

  $form['#attached']['js'][drupal_get_path('module', 'roskilde_search') . '/assets/roskilde-search-global-pager.js'] = array(
    'scope' => 'header',
    'weight' => 99999999,
  );

  $form['#submit'][] = '_roskilde_search_remove_search_forms_empty_search_form_errors';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter and search boxes.
 */
function roskilde_search_form_search_box_alter(&$form, &$form_state) {
  $form['search_block_form']['#attributes']['placeholder'] = t('Search in intranet');
  $form['search_block_form']['#attributes']['searche_type'] = 'intranet';
  // Inherited from roskilde.
  if (FALSE) {
    $form['search_block_form']['#title_display'] = 'before';
    $form['search_block_form']['#title'] = t('Find quickly');
  }
  $form['#validate'] = array();
  $form['#submit'] = array(
    'roskilde_search_form_search_box_submit'
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter and search boxes.
 */
function roskilde_search_form_apachesolr_search_bias_form_alter(&$form, &$form_state) {
  if (isset($form['field_bias']['tls_field_name'])) {
    $form['field_bias']['tls_field_name']['#access'] = TRUE;
  }

  if (isset($form['field_bias']['tls_field_unit__page_title'])) {
    $form['field_bias']['tls_field_unit__page_title']['#access'] = TRUE;
  }
}

/**
 * Submit callback for roskilde_search_form_apachesolr_panels_search_form_alter()
 *
 * @see search_box_form_submit()
 */
function _roskilde_search_remove_search_forms_empty_search_form_errors($form, $form_state) {
  form_clear_error();
  drupal_get_messages('error', TRUE);
}

/**
 * Submit callback for roskilde_search_form_search_box_alter().
 *
 * @param $form
 * @param $form_state
 */
function roskilde_search_form_search_box_submit($form, $form_state) {
  $phonebook_search_url = url('search/phonebook');
  if ($form['#action'] == $phonebook_search_url) {
    drupal_goto('search/phonebook/' . $form_state['values']['search_block_form']);
  }
  else {
    drupal_goto('search/global/' . $form_state['values']['search_block_form']);
  }
}

/**
 * Implements hook_views_pre_build().
 *
 * Used to add a dynamic "See all" link, based on imput parameters passed to the
 * view-pane configuration.
 *
 * @param view $view
 *
 * @see roskilde_customisations_preprocess_panels_pane
 */
function roskilde_search_views_pre_build(&$view) {
  // Views with 'See all' link.

  $views_to_add_link_to = array(
      'latest_events' => array(
        'search_page' => 'events',
        'fields_map' => array(
          0 => array(
            'view_field' => 'field_unit_tid',
            'solr_field' => 'im_field_unit',
          ),
          1 => array(
            'view_field' => 'field_topic_category_tid',
            'solr_field' => 'im_field_topic_category',
          ),
        ),
      ),
  );

  // Inherited from roskilde.
  if (isset($views_to_add_link_to[$view->name])) {
    $mapping = $views_to_add_link_to[$view->name];
    $query = array();
    foreach ($mapping['fields_map'] as $field_map) {
      $solr_field = $field_map['solr_field'];
      $conf_field = $field_map['view_field'];
      $channel_ids = isset($view->exposed_input[$conf_field]) ? $view->exposed_input[$conf_field] : array();
      $param_preparator = function($tid) use ($solr_field) {
        return "$solr_field:$tid";
      };
      $query = array_merge($query, array_values(array_map($param_preparator, $channel_ids)));
    }

    $options = array(
      'attributes' => array('class' => array('ros-link-more')),
    );
    if (!empty($query)) {
      $options['query'] = array(
        'f' => $query,
//        'solrsort' => 'ds_created desc',
      );
    }
    $path = '/search/' . $mapping['search_page'];
    // Override footer link with a dynamic one.
    $link = l('Se alle', $path, $options);
    $view->footer['area']->options['content'] = str_replace('[see_all_link]',
                                                  l('Se alle', $path, $options),
                                                  $view->footer['area']->options['content']);
  }
}
